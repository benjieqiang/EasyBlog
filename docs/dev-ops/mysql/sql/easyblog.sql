/*
 Navicat Premium Data Transfer

 Source Server         : mysql8-blog
 Source Server Type    : MySQL
 Source Server Version : 80032 (8.0.32)
 Source Host           : 127.0.0.1:3306
 Source Schema         : easyblog

 Target Server Type    : MySQL
 Target Server Version : 80032 (8.0.32)
 File Encoding         : 65001

 Date: 14/12/2024 17:04:10
*/

SET NAMES utf8mb4;
SET
FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`
(
    `id`          bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '文章id',
    `title`       varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '文章标题',
    `cover`       varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '文章封面',
    `summary`     varchar(160) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci          DEFAULT '' COMMENT '文章摘要',
    `create_time` datetime                                                      NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time` datetime                                                      NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最后一次更新时间',
    `is_deleted`  tinyint                                                       NOT NULL DEFAULT '0' COMMENT '删除标志位：0：未删除 1：已删除',
    `read_num`    int unsigned NOT NULL DEFAULT '1' COMMENT '被阅读次数',
    `weight`      int unsigned NOT NULL DEFAULT '0' COMMENT '文章权重，用于是否置顶（0: 未置顶；>0: 参与置顶，权重值越高越靠前）',
    `type`        tinyint                                                       NOT NULL DEFAULT '1' COMMENT '文章类型 - 1：普通文章，2：收录于知识库',
    PRIMARY KEY (`id`) USING BTREE,
    KEY           `idx_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='文章表';

-- ----------------------------
-- Records of article
-- ----------------------------
BEGIN;
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (2, 'TypeScript文档',
        'https://qarabala-video-save.oss-cn-beijing.aliyuncs.com/35d5a1d2-6ccc-4452-b747-ac0dadeeb67b.jpeg',
        'TypeScript全套教程', '2024-03-22 16:02:00', '2024-03-25 23:13:19', 0, 18, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (7, '极客园PC',
        'https://qarabala-video-save.oss-cn-beijing.aliyuncs.com/3075b737-b98e-4b78-83d6-c202b0ed7b02.png', '极客园PC1',
        '2024-03-22 19:21:07', '2024-03-26 15:33:08', 0, 42, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (10, 'Mac 多版本jdk安装与切换', 'https://img.arnasoft.site/weblog/1679bf5d88fa41ca9ebd360923e7e819.jpg',
        '现在已经安装了3个版本的jdk，但是怎么确定当前生效的是哪个版本呢？或者说怎么切换这两个版本呢？配置方法如下',
        '2024-03-26 17:47:17', '2024-03-26 18:03:21', 0, 35, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (11, 'idea Server URL 配置修改', 'https://img.arnasoft.site/weblog/dfb2a8767598412fad75adbabe67d89c.png',
        '在创建spring boot或者spring cloud项目时，idea默认使用https://start.spring.io作为脚手架，创建完成后手动去添加相关的jar包组合',
        '2024-03-26 17:56:23', '2024-03-26 17:56:23', 0, 22, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (12, '修改Docker容器内的MySQL服务密码，并成功完成可视化工具登录',
        'https://img.arnasoft.site/weblog/bec855b8810c45c395eb71adf29829a8.jpeg',
        '今天突然发现自己的MySQL服务的密码有很多人知道，瞬间感觉不安全了 最初设想', '2024-04-03 10:44:38',
        '2024-04-03 11:10:41', 0, 38, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (13, 'Docker 安装 Jenkins（图文教程）', 'https://img.arnasoft.site/weblog/2dc8f83c633941e1b10d4789a42c57d5.jpeg',
        'Jenkins 是一个开源的持续集成（Continuous Integration）工具，它的主要作用是帮助开发团队自动化构建、测试和部署软件项目',
        '2024-04-07 00:31:04', '2024-04-07 00:31:23', 0, 20, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (14, '常用网址大全', 'https://img.arnasoft.site/weblog/461fde1dde144a8fa2b89881be6f187e.jpeg',
        '常用的技术类网址大全，平时在开发和阅读文档时极其重要', '2024-04-08 00:20:02', '2024-04-16 23:20:47', 0, 8, 0,
        1);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (15, 'mac 安装n进行node版本管理-test', 'https://img.arnasoft.site/weblog/9bdc4e15fa184ba6a185c08b0cf548d6.png',
        '如果最终显示的还是原来node的版本号则需要在管理员权限下运行: sudo n node版本号', '2024-04-09 23:24:32',
        '2024-11-29 18:42:17', 0, 10, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (16, 'Linux docker redis 设置密码并启动登录',
        'https://img.arnasoft.site/weblog/f288cdb105c948a6ba037093595c4021.png',
        'docker redis 设置密码并启动，贼大的坑，初学者留意！', '2024-04-11 11:11:08', '2024-04-11 11:13:40', 0, 17, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (17, 'Vue 项目中 Vconsole 的使用', 'https://img.arnasoft.site/weblog/f274d084d06c43198703c62245f85fac.png',
        '一个轻量、可拓展、针对手机网页的前端开发者调试面板', '2024-04-16 23:36:35', '2024-04-16 23:36:35', 0, 8, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (18, 'IDEA 创建SpringBoot项目没办法选择jdk8',
        'https://img.arnasoft.site/weblog/d23296f2fe6e4eaca58af74bf96fd27e.png',
        '这里可以使用更便捷的方式，直接替换`server url`，这里推荐使用阿里的服务器`url`来创建项目', '2024-04-16 23:42:32',
        '2024-04-16 23:42:32', 0, 19, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (19, '使用 useDark(), 发现 transition 动画失效?',
        'https://img.arnasoft.site/weblog/d6aa4b6ad7ee4baea829871e0f1951e0.png',
        '对于为什么用 useDark() 会导致过渡效果失效,一直找不到原因？', '2024-04-17 00:33:03', '2024-04-17 00:33:03', 0,
        28, 0, 2);
INSERT INTO `article` (`id`, `title`, `cover`, `summary`, `create_time`, `update_time`, `is_deleted`, `read_num`,
                       `weight`, `type`)
VALUES (20, '如何把iconfont字体图标批量添加购物车？',
        'https://img.arnasoft.site/weblog/60bc19d5a2134788997376afb0aee790.png',
        '平时搜某个图标后想批量导入到购物车，可惜阿里巴巴字体图标库目前还没加批量入库的功能', '2024-04-19 18:46:32',
        '2024-04-19 18:49:42', 0, 9, 1, 1);
COMMIT;

-- ----------------------------
-- Table structure for article_content
-- ----------------------------
DROP TABLE IF EXISTS `article_content`;
CREATE TABLE `article_content`
(
    `id`         bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '文章内容id',
    `article_id` bigint NOT NULL COMMENT '文章id',
    `content`    longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '教程正文',
    PRIMARY KEY (`id`) USING BTREE,
    KEY          `idx_article_id` (`article_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='文章内容表';

-- ----------------------------
-- Records of article_content
-- ----------------------------
BEGIN;
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (2, 2,
        '# TypeScript文档\n\n[TS 官方文档](https://www.typescriptlang.org/)\n\n# TypeScript\n\n- TypeScript 介绍\n- TypeScript 初体验\n- TypeScript 常用类型\n- TypeScript 高级类型\n- TypeScript 类型声明文件\n- 在 React 中使用 TypeScript\n\n## TypeScript 介绍\n\n- [TS 官方文档](https://www.typescriptlang.org/)\n- [TS 中文参考 - 不再维护](https://www.tslang.cn/)\n\n![TS Logo](https://gitee.com/qarabala/docsify/raw/typescript/typescript/typescript/images/TS_logo.png)\n\n1. TypeScript 是什么\n2. TypeScript 为什么要为 JS 添加类型支持?\n3. TypeScript 相比 JS 的优势\n\n### TypeScript 是什么\n\n- **`TypeScript` 简称：TS，是 JavaScript 的超集**，简单来说就是：JS 有的 TS 都有\n\n![TS是JS的超集](https://qarabala.gitee.io/docsify/typescript/images/TS%E6%98%AFJS%E7%9A%84%E8%B6%85%E9%9B%86.png)\n\n- TypeScript = `Type` + JavaScript（在 JS 基础之上，**为 JS 添加了类型支持**）\n- TypeScript 是*微软*开发的开源编程语言，可以在任何运行 JavaScript 的地方运行\n\n![TS 和 JS 的对比](https://qarabala.gitee.io/docsify/typescript/images/TSvsJS.png)\n\n### TypeScript 为什么要为 JS 添加类型支持?\n\n- 背景：JS 的类型系统存在“先天缺陷”，JS 代码中绝大部分错误都是类型错误（Uncaught TypeError） \n- 这些经常出现的错误，导致了在使用 JS 进行项目开发时，增加了找 Bug、改 Bug 的时间，严重影响开发效率\n\n为什么会这样？\n\n- 从编程语言的动静来区分，**TypeScript 属于静态类型的编程语言**，**JavaScript 属于动态类型的编程语言**\n  - 静态类型：**编译**期做类型检查\n  - 动态类型：**执行**期做类型检查\n- 代码编译和代码执行的顺序：1 编译 2 执行\n\n- 对于 JS 来说：需要等到代码真正去执行的时候才能发现错误（晚）\n- 对于 TS 来说：在代码编译的时候（代码执行前）就可以发现错误（早）\n\n并且，配合 VSCode 等开发工具，TS 可以提前到**在编写代码的同时就发现代码中的错误**，减少找 Bug、改 Bug 时间  \n\n对比：\n\n- 使用 JS：\n  1. 在 VSCode 里面写代码\n  2. 在浏览器中运行代码 --> 运行时，才会发现错误【晚】\n- 使用 TS：\n  1. 在 VSCode 里面写代码 --> 写代码的同时，就会发现错误【早】\n  2. 在浏览器中运行代码\n\n### TypeScript 相比 JS 的优势\n\n1. **更早（写代码的同时）发现错误**，减少找 Bug、改 Bug 时间，提升开发效率\n2. 程序中任何位置的代码都有**代码提示**，随时随地的安全感，增强了开发体验\n3. 强大的类型系统提升了代码的可维护性，使得**重构代码更加容易**\n4. 支持最新的 ECMAScript 语法，**优先体验最新的语法，让你走在前端技术的最前沿** \n5. TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了学习负担\n\n除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端 项目的首选编程语言\n\n目前，前端最新的开发技术栈：\n\n1. React： TS + Hooks\n2. Vue： TS + Vue3\n\n  - 注意： Vue2 对 TS 的支持不好~ \n\n---\n\n## TypeScript 初体验\n\n1. 安装编译 TS 的工具包\n2. 编译并运行 TS 代码\n3. 简化运行 TS 的步骤\n\n### 安装编译 TS 的工具包\n\n- 问题：为什么要安装编译 TS 的工具包?\n- 回答：Node.js/浏览器，只认识 JS 代码，不认识 TS 代码。需要先将 TS 代码转化为 JS 代码，然后才能运行\n- 安装命令：`npm i -g typescript`\n  - typescript 包：用来编译 TS 代码的包，提供了 `tsc` 命令，实现了 TS -> JS 的转化\n  - *注意：Mac 电脑安装全局包时，需要添加 `sudo` 获取权限：`sudo npm i -g typescript`*  yarn 全局安装：`sudo yarn global add typescript`\n- 验证是否安装成功：tsc –v(查看 typescript 的版本)\n\n![TS 编译](https://qarabala.gitee.io/docsify/typescript/images/TS编译.png)\n\n###  编译并运行 TS 代码\n\n1. 创建 hello.ts 文件（注意：**TS 文件的后缀名为 `.ts`**）\n2. 将 TS 编译为 JS：在终端中输入命令，`tsc hello.ts`（此时，在同级目录中会出现一个同名的 JS 文件）\n3. 执行 JS 代码：在终端中输入命令，`node hello.js`\n\n1 创建 ts 文件  ===>  2 编译 TS  ===>  3 执行 JS  \n\n- 说明：所有合法的 JS 代码都是 TS 代码，有 JS 基础只需要学习 TS 的类型即可\n- 注意：由 TS 编译生成的 JS 文件，代码中就没有类型信息了\n\n### 简化运行 TS 的步骤\n\n- 问题描述：每次修改代码后，都要重复执行两个命令，才能运行 TS 代码，太繁琐\n- 简化方式：使用 `ts-node` 包，直接在 Node.js 中执行 TS 代码\n- 安装命令：`npm i -g ts-node`\n  - ts-node 包提供了 `ts-node` 命令\n  - 使用方式：`ts-node hello.ts` 相当于：1 tsc 命令  2 node（注意：ts-node 不会生成 js 文件）\n\n解释：ts-node 命令在内部偷偷的将 TS -> JS，然后，再运行 JS 代码\n\n\n# TypeScript 常用类型\n\n- TypeScript 是 JS 的超集，TS 提供了 JS 的所有功能，并且额外的增加了：**类型系统**\n  - 所有的 JS 代码都是 TS 代码\n  - **JS 有类型**（比如，number/string 等），但是 **JS 不会检查变量的类型是否发生变化**，而 TS 会检查\n- TypeScript 类型系统的主要优势：**可以显示标记出代码中的意外行为，从而降低了发生错误的可能性**\n\n1. 类型注解\n2. 常用基础类型\n\n## 类型注解\n\n示例代码:\n\n```ts\nlet age: number = 18\n```\n\n- 说明：代码中的 `: number` 就是**类型注解**\n- 作用：**为变量添加类型约束**。比如，上述代码中，约定变量 age 的类型为 number 类型\n- 解释：**约定了什么类型，就只能给变量赋值该类型的值，否则，就会报错**\n\n- 错误演示：\n\n```ts\n// 错误代码：\n// 错误原因：将 string 类型的值赋值给了 number 类型的变量，类型不一致\nlet age: number = \'18\'\n```\n\n## 常用基础类型\n\n可以将 TS 中的常用基础类型细分为两类：1 JS 已有类型 2 TS 新增类型\n\n1. JS 已有类型\n  - 原始类型：`number/string/boolean/null/undefined/symbol`\n  - 对象类型：`object`（包括，数组、对象、函数等对象）\n2. TS 新增类型\n  - 联合类型、自定义类型(类型别名)、接口、元组、字面量类型、枚举、void、any 等\n\n- 注意：\n  1. *原始类型*在 TS 和 JS 中写法一致\n  2. *对象类型*在 TS 中更加细化，每个具体的对象（比如，数组、对象、函数）都有自己的类型语法\n\n### 原始类型\n\n- 原始类型：number/string/boolean/null/undefined/symbol\n- 特点：简单，这些类型，完全按照 JS 中类型的名称来书写\n\n```ts\nlet age: number = 18\nlet myName: string = \' 老师\'\nlet isLoading: boolean = false\n\n// 等等...\n```\n\n###  数组类型\n\n- 数组类型的两种写法：\n  - 推荐使用 `number[]` 写法\n\n```ts\n// 写法一：\nlet numbers: number[] = [1, 3, 5]\n// 写法二：\nlet strings: Array<string> = [\'a\', \'b\', \'c\']\n```\n\n### 联合类型\n\n需求：数组中既有 number 类型，又有 string 类型，这个数组的类型应该如何写?\n\n```ts\nlet arr: (number | string)[] = [1, \'a\', 3, \'b\']\n```\n\n- 解释：`|`（竖线）在 TS 中叫做**联合类型**，即：由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种\n- 注意：这是 TS 中联合类型的语法，只有一根竖线，不要与 JS 中的或（|| 或）混淆了\n\n### 类型别名\n\n- `类型别名（自定义类型）`：为任意类型起别名\n- 使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，**简化该类型的使用**\n\n```ts\ntype CustomArray = (number | string)[]\n\nlet arr1: CustomArray = [1, \'a\', 3, \'b\']\nlet arr2: CustomArray = [\'x\', \'y\', 6, 7]\n```\n\n- 解释:\n  1. 使用 `type` 关键字来创建自定义类型\n  2. 类型别名（比如，此处的 *CustomArray*）可以是任意合法的变量名称\n  3. 推荐使用大写字母开头\n  4. 创建类型别名后，直接使用该类型别名作为变量的类型注解即可\n\n### 函数类型\n\n- 函数的类型实际上指的是：`函数参数`和`返回值`的类型\n- 为函数指定类型的两种方式：\n  1. 单独指定参数、返回值的类型\n  2. 同时指定参数、返回值的类型\n\n1. 单独指定参数、返回值的类型：\n\n```ts\n// 函数声明\nfunction add(num1: number, num2: number): number {\n  return num1 + num2\n}\n\n// 箭头函数\nconst add = (num1: number, num2: number): number => {\n  return num1 + num2\n}\n```\n\n2. 同时指定参数、返回值的类型:\n\n```ts\ntype AddFn = (num1: number, num2: number) => number\n\nconst add: AddFn = (num1, num2) => {\n  return num1 + num2\n}\n```\n\n- 解释：当函数作为表达式时，可以通过类似箭头函数形式的语法来为函数添加类型\n- 注意：这种形式只适用于函数表达式\n\n#### void 类型\n\n- 如果函数没有返回值，那么，函数返回值类型为：`void`\n\n```ts\nfunction greet(name: string): void {\n  console.log(\'Hello\', name)\n}\n```\n\n- 注意：\n  - 如果一个函数没有返回值，此时，在 TS 的类型中，应该使用 `void` 类型\n\n```ts\n// 如果什么都不写，此时，add 函数的返回值类型为： void\nconst add = () => {}\n// 这种写法是明确指定函数返回值类型为 void，与上面不指定返回值类型相同\nconst add = (): void => {}\n\n// 但，如果指定 返回值类型为 undefined，此时，函数体中必须显示的 return undefined 才可以\nconst add = (): undefined => {\n  // 此处，返回的 undefined 是 JS 中的一个值\n  return undefined\n}\n```\n\n#### 函数可选参数\n\n- 使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到**可选参数**了\n- 比如，数组的 slice 方法，可以 `slice()` 也可以 `slice(1)` 还可以 `slice(1, 3)`\n\n```ts\nfunction mySlice(start?: number, end?: number): void {\n  console.log(\'起始索引：\', start, \'结束索引：\', end)\n}\n```\n\n- 可选参数：在可传可不传的参数名称后面添加 `?`（问号）\n- 注意：**可选参数只能出现在参数列表的最后**，也就是说可选参数后面不能再出现必选参数\n\n### 对象类型\n\n- JS 中的对象是由属性和方法构成的，而 **TS 对象的类型就是在描述对象的结构**（有什么类型的属性和方法）\n- 对象类型的写法:\n\n```ts\n// 空对象\nlet person: {} = {}\n\n// 有属性的对象\nlet person: { name: string } = {\n  name: \'同学\'\n}\n\n// 既有属性又有方法的对象\n// 在一行代码中指定对象的多个属性类型时，使用 `;`（分号）来分隔\nlet person: { name: string; sayHi(): void } = {\n  name: \'jack\',\n  sayHi() {}\n}\n\n// 对象中如果有多个类型，可以换行写：\n// 通过换行来分隔多个属性类型，可以去掉 `;`\nlet person: {\n  name: string\n  sayHi(): void\n} = {\n  name: \'jack\',\n  sayHi() {}\n}\n```\n\n- 解释:\n  1. 使用 `{}` 来描述对象结构\n  2. 属性采用`属性名: 类型`的形式\n  3. 方法采用`方法名(): 返回值类型`的形式\n\n#### 使用类型别名\n\n- 注意：直接使用 `{}` 形式为对象添加类型，会降低代码的可读性（不好辨识类型和值）\n- 推荐：**使用类型别名为对象添加类型**\n\n```ts\n// 创建类型别名\ntype Person = {\n  name: string\n  sayHi(): void\n}\n\n// 使用类型别名作为对象的类型：\nlet person: Person = {\n  name: \'jack\',\n  sayHi() {}\n}\n```\n\n#### 带有参数的方法类型\n\n- 如果方法有参数，就在方法名后面的小括号中指定参数类型\n\n```ts\ntype Person = {\n  greet(name: string): void\n}\n\nlet person: Person = {\n  greet(name) {\n    console.log(name)\n  }\n}\n```\n\n#### 箭头函数形式的方法类型\n\n- 方法的类型也可以使用箭头函数形式\n\n```ts\ntype Person = {\n  greet: (name: string) => void\n}\n\nlet person: Person = {\n  greet(name) {\n    console.log(name)\n  }\n}\n```\n\n#### 对象可选属性\n\n- 对象的属性或方法，也可以是可选的，此时就用到**可选属性**了\n- 比如，我们在使用 `axios({ ... })` 时，如果发送 GET 请求，method 属性就可以省略\n- 可选属性的语法与函数可选参数的语法一致，都使用 `?` 来表示\n\n```ts\ntype Config = {\n  url: string\n  method?: string\n}\n\nfunction myAxios(config: Config) {\n  console.log(config)\n}\n```\n\n### 接口\n\n当一个对象类型被多次使用时，一般会使用接口（`interface`）来描述对象的类型，达到复用的目的\n\n- 解释：\n  1. 使用 `interface` 关键字来声明接口\n  2. 接口名称(比如，此处的 IPerson)，可以是任意合法的变量名称，推荐以 `I` 开头\n  3. 声明接口后，直接使用接口名称作为变量的类型\n  4. 因为每一行只有一个属性类型，因此，属性类型后没有 ;(分号)\n\n```ts\ninterface IPerson {\n  name: string\n  age: number\n  sayHi(): void\n}\n\nlet person: IPerson = {\n  name: \'jack\',\n  age: 19,\n  sayHi() {}\n}\n```\n\n#### interface vs type\n\n- interface（接口）和 type（类型别名）的对比：\n- 相同点：都可以给对象指定类型\n- 不同点:\n  - 接口，只能为对象指定类型\n  - 类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名\n- 推荐：**能使用 type 就是用 type**\n\n```ts\ninterface IPerson {\n  name: string\n  age: number\n  sayHi(): void\n}\n\n// 为对象类型创建类型别名\ntype IPerson = {\n  name: string\n  age: number\n  sayHi(): void\n}\n\n// 为联合类型创建类型别名\ntype NumStr = number | string\n```\n\n#### 接口继承\n\n- 如果两个接口之间有相同的属性或方法，可以将**公共的属性或方法抽离出来，通过继承来实现复用**\n- 比如，这两个接口都有 x、y 两个属性，重复写两次，可以，但很繁琐\n\n```ts\ninterface Point2D { x: number; y: number }\ninterface Point3D { x: number; y: number; z: number }\n```\n\n- 更好的方式:\n\n```ts\ninterface Point2D { x: number; y: number }\n// 继承 Point2D\ninterface Point3D extends Point2D {\n  z: number\n}\n```\n\n- 解释：\n  1. 使用 `extends`(继承)关键字实现了接口 Point3D 继承 Point2D\n  2. 继承后，Point3D 就有了 Point2D 的所有属性和方法(此时，Point3D 同时有 x、y、z 三个属性)\n\n### 元组\n\n- 场景：在地图中，使用经纬度坐标来标记位置信息\n- 可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型 number[]\n\n```ts\nlet position: number[] = [116.2317, 39.5427]\n```\n\n- 使用 number[] 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字\n- 更好的方式：`元组 Tuple`\n- 元组类型是另一种类型的数组，它确切地知道包含多少个元素，**以及特定索引对应的类型**\n\n```ts\nlet position: [number, number] = [39.5427, 116.2317]\n```\n\n- 解释：\n  1. 元组类型可以确切地标记出有多少个元素，以及每个元素的类型\n  2. 该示例中，元素有两个元素，每个元素的类型都是 number\n\n---\n\n### 类型推论\n\n- 在 TS 中，某些没有明确指出类型的地方，**TS 的类型推论机制会帮助提供类型**\n- 换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写\n- 发生类型推论的 2 种常见场景:\n  1. 声明变量并初始化时\n  2. 决定函数返回值时\n\n```ts\n// 变量 age 的类型被自动推断为：number\nlet age = 18\n\n// 函数返回值的类型被自动推断为：number\nfunction add(num1: number, num2: number) {\n  return num1 + num2\n}\n```\n\n- 推荐：**能省略类型注解的地方就省略**（~~偷懒~~，充分利用TS类型推论的能力，提升开发效率）\n- 技巧：如果不知道类型，可以通过鼠标放在变量名称上，利用 VSCode 的提示来查看类型\n- 推荐：在 VSCode 中写代码的时候，多看方法、属性的类型，养成写代码看类型的习惯\n\n```\nconsole.log()\ndocument.createElement()\n```\n\n\n\n### 字面量类型\n\n- 思考以下代码，两个变量的类型分别是什么?\n\n```ts\nlet str1 = \'Hello TS\'\nconst str2 = \'Hello TS\'\n```\n\n- 通过 TS 类型推论机制，可以得到答案：\n  1. 变量 str1 的类型为：string\n  2.  变量 str2 的类型为：\'Hello TS\'\n\n- 解释:\n1. str1 是一个变量(let)，它的值可以是任意字符串，所以类型为:string\n2. str2 是一个常量(const)，它的值不能变化只能是 \'Hello TS\'，所以，它的类型为:\'Hello TS\'\n\n- 注意：此处的 \'Hello TS\'，就是一个**字面量类型**，也就是说某个特定的字符串也可以作为 TS 中的类型\n- 任意的 JS 字面量（比如，对象、数字等）都可以作为类型使用\n  - 字面量：`{ name: \'jack\' }` `[]` `18` `20` `\'abc\'` `false` `function() {}`\n\n```jsx\nlet str1 = \'Hello TS\'\nconst str2 = \'Hello TS123\'\n\nstr1 = str2\n\n// str2 = str1 不行\n\n```\n\n\n\n#### 使用模式和场景\n\n- 使用模式：**字面量类型配合联合类型一起使用**\n- 使用场景：用来表示一组明确的可选值列表\n- 比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个\n\n```ts\n// 使用自定义类型:\ntype Direction = \'up\' | \'down\' | \'left\' | \'right\'\n\nfunction changeDirection(direction: Direction) {\n  console.log(direction)\n}\n\n// 调用函数时，会有类型提示：\nchangeDirection(\'up\')\n```\n\n- 解释：参数 direction 的值只能是 up/down/left/right 中的任意一个\n- 优势：相比于 string 类型，使用字面量类型更加精确、严谨\n\n### 【了解】枚举\n\n- 枚举的功能类似于**字面量类型+联合类型组合**的功能，也可以表示一组明确的可选值\n- 枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个\n\n```ts\n// 创建枚举\nenum Direction { Up, Down, Left, Right }\n\n// 使用枚举类型\nfunction changeDirection(direction: Direction) {\n  console.log(direction)\n}\n\n// 调用函数时，需要应该传入：枚举 Direction 成员的任意一个\n// 类似于 JS 中的对象，直接通过 点（.）语法 访问枚举的成员\nchangeDirection(Direction.Up)\n```\n\n- 解释:\n  1. 使用 `enum` 关键字定义枚举\n  2. 约定枚举名称以大写字母开头\n  3. 枚举中的多个值之间通过 `,`（逗号）分隔\n  4. 定义好枚举后，直接使用枚举名称作为类型注解\n\n#### 数字枚举\n\n- 问题：我们把枚举成员作为了函数的实参，它的值是什么呢?\n- 解释：通过将鼠标移入 Direction.Up，可以看到枚举成员 Up 的值为 0\n- 注意：枚举成员是有值的，默认为：从 0 开始自增的数值\n- 我们把，枚举成员的值为数字的枚举，称为：`数字枚举`\n- 当然，也可以给枚举中的成员初始化值\n\n```ts\n// Down -> 11、Left -> 12、Right -> 13\nenum Direction { Up = 10, Down, Left, Right }\n\nenum Direction { Up = 2, Down = 4, Left = 8, Right = 16 }\n```\n\n#### 字符串枚举\n\n- 字符串枚举：枚举成员的值是字符串\n- 注意：字符串枚举没有自增长行为，因此，**字符串枚举的每个成员必须有初始值**\n\n```ts\nenum Direction {\n  Up = \'UP\',\n  Down = \'DOWN\',\n  Left = \'LEFT\',\n  Right = \'RIGHT\'\n}\n```\n\n#### 枚举实现原理\n\n- 枚举是 TS 为数不多的非 JavaScript 类型级扩展(不仅仅是类型)的特性之一\n- 因为：其他类型仅仅被当做类型，而枚举不仅用作类型，还提供值(枚举成员都是有值的)\n- 也就是说，其他的类型会在编译为 JS 代码时自动移除。但是，**枚举类型会被编译为 JS 代码**\n\n```ts\nenum Direction {\n  Up = \'UP\',\n  Down = \'DOWN\',\n  Left = \'LEFT\',\n  Right = \'RIGHT\'\n}\n\n// 会被编译为以下 JS 代码：\nvar Direction;\n\n(function (Direction) {\n  Direction[\'Up\'] = \'UP\'\n  Direction[\'Down\'] = \'DOWN\'\n  Direction[\'Left\'] = \'LEFT\'\n  Direction[\'Right\'] = \'RIGHT\'\n})(Direction || Direction = {})\n```\n\n- 说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表\n- 一般情况下，**推荐使用字面量类型+联合类型组合的方式**，因为相比枚举，这种方式更加直观、简洁、高效\n\n### any 类型\n\n- **原则:不推荐使用 any**!这会让 TypeScript 变为 “AnyScript”(失去 TS 类型保护的优势)\n- 因为当值的类型为 any 时，可以对该值进行任意操作，并且不会有代码提示\n\n```ts\nlet obj: any = { x: 0 }\n\nobj.bar = 100\nobj()\nconst n: number = obj\n```\n\n- 解释:以上操作都不会有任何类型错误提示，即使可能存在错误\n- 尽可能的避免使用 any 类型，除非临时使用 any 来“避免”书写很长、很复杂的类型\n- 其他隐式具有 any 类型的情况\n  1. 声明变量不提供类型也不提供默认值\n  2. 函数参数不加类型\n- 注意：因为不推荐使用 any，所以，这两种情况下都应该提供类型\n\n在项目开发中，尽量少用any类型\n\n---\n\n### 类型断言\n\n有时候你会比 TS 更加明确一个值的类型，此时，可以使用类型断言来指定更具体的类型。 比如，\n\n```ts\nconst aLink = document.getElementById(\'link\')\n```\n\n- 注意：该方法返回值的类型是 HTMLElement，该类型只包含所有标签公共的属性或方法，不包含 a 标签特有的 href 等属性\n- 因此，这个**类型太宽泛(不具体)**，无法操作 href 等 a 标签特有的属性或方法\n- 解决方式：这种情况下就需要**使用类型断言指定更加具体的类型**\n- 使用类型断言：\n\n```ts\nconst aLink = document.getElementById(\'link\') as HTMLAnchorElement\n```\n\n- 解释:\n  1. 使用 `as` 关键字实现类型断言\n  2. 关键字 as 后面的类型是一个更加具体的类型（HTMLAnchorElement 是 HTMLElement 的子类型）\n  3. 通过类型断言，aLink 的类型变得更加具体，这样就可以访问 a 标签特有的属性或方法了\n\n- 另一种语法，使用 `<>` 语法，这种语法形式不常用知道即可:\n\n```ts\n// 该语法，知道即可：在react的jsx中使用会报错\nconst aLink = <HTMLAnchorElement>document.getElementById(\'link\')\n```\n\n*技巧：在浏览器控制台，通过 `__proto__` 获取 DOM 元素的类型*\n\n### typeof\n\n- 众所周知，JS 中提供了 typeof 操作符，用来在 JS 中获取数据的类型\n\n```js\nconsole.log(typeof \'Hello world\') // ?\n```\n\n- 实际上，TS 也提供了 typeof 操作符：可以在*类型上下文*中引用变量或属性的类型（类型查询）\n- 使用场景:根据已有变量的值，获取该值的类型，来简化类型书写\n\n```ts\nlet p = { x: 1, y: 2 }\nfunction formatPoint(point: { x: number; y: number }) {}\nformatPoint(p)\n\nfunction formatPoint(point: typeof p) {}\n```\n\n- 解释:\n  1. 使用 `typeof` 操作符来获取变量 p 的类型，结果与第一种（对象字面量形式的类型）相同\n  2. typeof 出现在**类型注解的位置（参数名称的冒号后面）所处的环境就在类型上下文**(区别于 JS 代码)\n  3. 注意：typeof 只能用来查询变量或属性的类型，无法查询其他形式的类型（比如，函数调用的类型）\n\n\n# TypeScript 高级类型\n\nTS 中的高级类型有很多，重点学习以下高级类型：\n\n1. 泛型 和 keyof\n2. 索引签名类型 和 索引查询类型\n3. 映射类型\n\n## 泛型\n\n- **泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用**，常用于：函数、接口、class 中\n- 需求：创建一个 id 函数，传入什么数据就返回该数据本身(也就是说，参数和返回值类型相同)\n\n```ts\nfunction id(value: number): number { return value }\n```\n\n- 比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型\n- 为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全\n\n```ts\nfunction id(value: any): any { return value }\n```\n\n- **泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用**\n- 实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一\n\n### 创建泛型函数\n\n```ts\nfunction id<Type>(value: Type): Type { return value }\n\nfunction id<T>(value: T): T { return value }\n```\n\n- 解释:\n  1. 语法：在函数名称的后面添加 `<>`(尖括号)，**尖括号中添加类型变量**，比如此处的 Type\n  2. **类型变量 Type，是一种特殊类型的变量，它处理类型而不是值**\n  3. **该类型变量相当于一个类型容器**，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定)\n  4. 因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型\n  5. 类型变量 Type，可以是任意合法的变量名称\n\n### 调用泛型函数\n\n```ts\nconst num = id<number>(10)\nconst str = id<string>(\'a\')\n```\n\n- 解释：\n  1. 语法：在函数名称的后面添加 `<>`(尖括号)，**尖括号中指定具体的类型**，比如，此处的 number\n  2. 当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到\n  3. 此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number\n\n- 同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string\n- 这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，**实现了复用的同时保证了类型安全**\n\n### 简化泛型函数调用\n\n```ts\n// 省略 <number> 调用函数\nlet num = id(10)\nlet str = id(\'a\')\n```\n\n- 解释:\n  1. 在调用泛型函数时，**可以省略 `<类型>` 来简化泛型函数的调用**\n  2. 此时，TS 内部会采用一种叫做**类型参数推断**的机制，来根据传入的实参自动推断出类型变量 Type 的类型\n  3. 比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型\n\n- 推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读\n- 说明：**当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数**\n\n### 泛型约束\n\n- 默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性\n- 比如，id(\'a\') 调用函数时获取参数的长度：\n\n```ts\nfunction id<Type>(value: Type): Type {\n  console.log(value.length)\n  return value\n}\n\nid(\'a\')\n```\n\n- 解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length\n- 此时，就需要**为泛型添加约束来`收缩类型`(缩窄类型取值范围)**\n- 添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型  2 添加约束\n\n#### 指定更加具体的类型\n\n比如，将类型修改为 `Type[]`(Type 类型的数组)，因为只要是数组就一定存在 length 属性，因此就可以访问了\n\n```ts\nfunction id<Type>(value: Type[]): Type[] {\n  console.log(value.length)\n  return value\n}\n```\n\n#### 添加约束\n\n```ts\n// 创建一个接口\ninterface ILength { length: number }\n\n// Type extends ILength 添加泛型约束\n// 解释：表示传入的 类型 必须满足 ILength 接口的要求才行，也就是得有一个 number 类型的 length 属性\nfunction id<Type extends ILength>(value: Type): Type {\n  console.log(value.length)\n  return value\n}\n```\n\n- 解释:\n  1. 创建描述约束的接口 ILength，该接口要求提供 length 属性\n  2. 通过 `extends` 关键字使用该接口，为泛型(类型变量)添加约束\n  3. 该约束表示：**传入的类型必须具有 length 属性**\n- 注意:传入的实参(比如，数组)只要有 length 属性即可（类型兼容性)\n\n### 多个类型变量\n\n泛型的类型变量可以有多个，并且**类型变量之间还可以约束**(比如，第二个类型变量受第一个类型变量约束)\n比如，创建一个函数来获取对象中属性的值：\n\n```ts\nfunction getProp<Type, Key extends keyof Type>(obj: Type, key: Key) {\n  return obj[key]\n}\nlet person = { name: \'jack\', age: 18 }\ngetProp(person, \'name\')\n```\n\n- 解释:\n  1. 添加了第二个类型变量 Key，两个类型变量之间使用 `,` 逗号分隔。\n  2. **keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型**。\n  3. 本示例中 `keyof Type` 实际上获取的是 person 对象所有键的联合类型，也就是：`\'name\' | \'age\'`\n  4. 类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性\n\n```ts\n// Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错\n// 如果要用到 对象 类型，应该用 object ，而不是 Object\nfunction getProperty<Type extends object, Key extends keyof Type>(obj: Type, key: Key) {\n  return obj[key]\n}\n```\n\n---\n\n### 泛型接口\n\n泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性\n\n```ts\ninterface IdFunc<Type> {\n  id: (value: Type) => Type\n  ids: () => Type[]\n}\n\nlet obj: IdFunc<number> = {\n  id(value) { return value },\n  ids() { return [1, 3, 5] }\n}\n```\n\n- 解释:\n  1. 在接口名称的后面添加 `<类型变量>`，那么，这个接口就变成了泛型接口。\n  2. 接口的类型变量，对接口中所有其他成员可见，也就是**接口中所有成员都可以使用类型变量**。\n  3. 使用泛型接口时，**需要显式指定具体的类型**(比如，此处的 IdFunc<nunber>)。\n  4. 此时，id 方法的参数和返回值类型都是 number;ids 方法的返回值类型是 number[]。\n\n#### JS 中的泛型接口\n\n实际上，JS 中的数组在 TS 中就是一个泛型接口。\n\n```ts\nconst strs = [\'a\', \'b\', \'c\']\n// 鼠标放在 forEach 上查看类型\nstrs.forEach\n\nconst nums = [1, 3, 5]\n// 鼠标放在 forEach 上查看类型\nnums.forEach\n```\n\n![image-20210917002203414](images/image-20210917002203414.png)\n\n- 解释:当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型\n- 技巧:可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看具体的类型信息\n\n### 泛型工具类型\n\n- 泛型工具类型:TS 内置了一些常用的工具类型，来简化 TS 中的一些常见操作\n- 说明:它们都是基于泛型实现的(泛型适用于多种类型，更加通用)，并且是内置的，可以直接在代码中使用。 这些工具类型有很多，主要学习以下几个:\n\n1. `Partial<Type>`\n2. `Readonly<Type>`\n3. `Pick<Type, Keys>`\n4. `Omit<Type>`\n\n#### Partial\n\n- Partial<Type> 用来构造(创建)一个类型，将 Type 的所有属性设置为可选。\n\n```ts\ntype Props =  {\n  id: string\n  children: number[]\n}\n\ntype PartialProps = Partial<Props>\n```\n\n- 解释:构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。\n\n#### Readonly\n\n- Readonly<Type> 用来构造一个类型，将 Type 的所有属性都设置为 readonly(只读)。\n\n```ts\ntype Props =  {\n  id: string\n  children: number[]\n}\n\ntype ReadonlyProps = Readonly<Props>\n```\n\n- 解释:构造出来的新类型 ReadonlyProps 结构和 Props 相同，但所有属性都变为只读的。\n\n```ts\nlet props: ReadonlyProps = { id: \'1\', children: [] }\n// 错误演示\nprops.id = \'2\'\n```\n\n- 当我们想重新给 id 属性赋值时，就会报错:无法分配到 \"id\" ，因为它是只读属性。\n\n#### Pick\n\n- Pick<Type, Keys> 从 Type 中选择一组属性来构造新类型。\n\n```ts\ninterface Props {\n  id: string\n  title: string\n  children: number[]\n}\ntype PickProps = Pick<Props, \'id\' | \'title\'>\n```\n\n- 解释:\n  1. Pick 工具类型有两个类型变量:1 表示选择谁的属性 2 表示选择哪几个属性。 2. 其中第二个类型变量，如果只选择一个则只传入该属性名即可。\n  2. 第二个类型变量传入的属性只能是第一个类型变量中存在的属性。\n  3. 构造出来的新类型 PickProps，只有 id 和 title 两个属性类型。\n\n#### Omit\n\nOmit<K,T>类型让我们可以从另一个对象类型中剔除某些属性，并创建一个新的对象类型：\n\nK：是对象类型名称，T：是剔除K类型中的属性名称\n\n![image-20210917003456128](images/image-20210917003456128.png)\n\n\n\n\n\n\n\n\n\n## 索引签名类型\n\n绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。\n使用场景:**当无法确定对象中有哪些属性**(或者说对象中可以出现任意多个属性)，此时，就用到**索引签名类型**了。\n\n```ts\ninterface AnyObject {\n  [key: string]: number\n}\nlet obj: AnyObject = {\n  a: 1,\n  b: 2,\n}\n```\n\n- 解释:\n  1. 使用 `[key: string]` 来约束该接口中允许出现的属性名称。表示只要是 string 类型的属性名称，都可以出现在对象中。\n  2. 这样，对象 obj 中就可以出现任意多个属性(比如，a、b 等)。\n  3. `key 只是一个占位符`，可以换成任意合法的变量名称。\n  4. 隐藏的前置知识:`JS 中对象({})的键是 string 类型的`。\n\n### 数组索引类型签名\n\n- 在 JS 中数组是一类特殊的对象，特殊在数组的键(索引)是数值类型\n- 并且，数组也可以出现任意多个元素。所以，在数组对应的泛型接口中，也用到了索引签名类型。\n\n```ts\ninterface MyArray<T> {\n  [n: number]: T\n}\nlet arr: MyArray<number> = [1, 3, 5]\n```\n\n- 解释:\n    1. MyArray 接口模拟原生的数组接口，并使用 `[n: number]` 来作为索引签名类型。\n  2. 该索引签名类型表示:只要是 number 类型的键(索引)都可以出现在数组中，或者说数组中可以有任意多个元素。\n  3. 同时也符合数组索引是 number 类型这一前提。\n\n## 映射类型\n\n- 映射类型:**基于旧类型创建新类型(对象类型**)，减少重复、提升开发效率。\n比如，类型 PropKeys 有 x/y/z，另一个类型 Type1 中也有 x/y/z，并且 Type1 中 x/y/z 的类型相同:\n\n```ts\ntype PropKeys = \'x\' | \'y\' | \'z\'\ntype Type1 = { x: number; y: number; z: number }\n```\n\n- 这样书写没错，但 x/y/z 重复书写了两次。像这种情况，就可以使用映射类型来进行简化。\n\n```ts\ntype PropKeys = \'x\' | \'y\' | \'z\'\ntype Type2 = { [Key in PropKeys]: number }\n```\n\n- 解释:\n  1. 映射类型是基于索引签名类型的，所以，该语法类似于索引签名类型，也使用了 []。\n  2. `Key in PropKeys` 表示 Key 可以是 PropKeys 联合类型中的任意一个，类似于 forin(let k in obj)。\n  3. 使用映射类型创建的新对象类型 Type2 和类型 Type1 结构完全相同。\n  4. 注意:**映射类型只能在类型别名中使用，不能在接口中使用**。\n\n### 根据对象创建\n\n映射类型除了根据联合类型创建新类型外，还可以根据对象类型来创建:\n\n```ts\ntype Props = { a: number; b: string; c: boolean }\ntype Type3 = { [key in keyof Props]: number }\n```\n\n- 解释:\n  1. 首先，先执行 `keyof Props` 获取到对象类型 Props 中所有键的联合类型即，\'a\' | \'b\' | \'c\'。\n  2. 然后，`Key in ...` 就表示 Key 可以是 Props 中所有的键名称中的任意一个。\n\n### 内置映射类型实现分析\n\n- 实际上，前面讲到的**泛型工具类型**(比如，Partial<Type>)都是基于映射类型实现的。 \n- 比如，Partial<Type> 的实现:\n\n```ts\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\ntype Props = { a: number; b: string; c: boolean }\ntype PartialProps = Partial<Props>\n```\n\n- 解释:\n  1. `keyof T` 即 keyof Props 表示获取 Props 的所有键，也就是:\'a\' | \'b\' | \'c\'。\n  2. 在 [] 后面添加 `?`(问号)，表示将这些属性变为`可选`的，以此来实现 Partial 的功能。\n  3. 冒号后面的 `T[P] 表示获取 T 中每个键对应的类型`。比如，如果是 \'a\' 则类型是 number;如果是 \'b\' 则类型是 string。\n  4. 最终，新类型 PartialProps 和旧类型 Props 结构完全相同，只是让所有类型都变为可选了。\n\n### 索引访问类型\n\n- 刚刚用到的 `T[P]` 语法，在 TS 中叫做`索引访问类型`\n- 作用:**用来查询属性的类型**。\n\n```ts\ntype Props = { a: number; b: string; c: boolean }\ntype TypeA = Props[\'a\']\n```\n\n- 解释:`Props[\'a\']` 表示查询类型 Props 中属性 \'a\' 对应的类型 number。所以，TypeA 的类型为 number\n- 注意:**[] 中的属性必须存在于被查询类型中**，否则就会报错。\n\n#### 同时查询多个索引的类型\n\n- 索引查询类型的其他使用方式:同时查询多个索引的类型\n\n```ts\ntype Props = { a: number; b: string; c: boolean }\n\ntype TypeA = Props[\'a\' | \'b\'] // string | number\n```\n\n- 解释:使用字符串字面量的联合类型，获取属性 a 和 b 对应的类型，结果为: string | number。\n\n```ts\ntype TypeA = Props[keyof Props] // string | number | boolean\n```\n\n- 解释:使用 keyof 操作符获取 Props 中所有键对应的类型，结果为: string | number | boolean。 \n\n\n\n# 在 React 项目中使用 TS\n\n1. 创建新项目\n2. 在现有项目中添加 TS\n\n## 创建新项目\n\n- 命令：`npx create-react-app my-app --template typescript`\n- 说明：在命令行中，添加 `--template typescript` 表示创建支持 TS 的项目\n\n- 项目目录的变化：\n  1. 在项目根目录中多了一个文件：`tsconfig.json`\n     - TS 的配置文件\n  2. 在 src 目录中，文件的后缀有变化，由原来的 .js 变为 `.ts` 或 `.tsx`\n     - `.ts` ts 文件的后缀名\n     - `.tsx` 是在 TS 中使用 React 组件时，需要使用该后缀\n  3. 在 src 目录中，多了 `react-app-env.d.ts` 文件\n     - `.d.ts` 类型声明文件，用来指定类型\n\n## tsconfig的介绍\n\n+ tsconfig.json是typescript项目的配置文件，用于配置typescript\n+ tsconfig.json配置文件可以通过 `tsc --init` 生成\n\n- 说明：所有的配置项都可以通过鼠标移入的方式，来查看配置项的解释说明。\n- [tsconfig 文档链接](https://www.typescriptlang.org/tsconfig)\n\n```json\n{\n  // 编译选项\n  \"compilerOptions\": {\n    // 生成代码的语言版本：将我们写的 TS 代码编译成哪个版本的 JS 代码\n    // 命令行： tsc --target es5 11-测试TS配置文件.ts\n    \"target\": \"es5\",\n    // 指定要包含在编译中的 library\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    // 允许 ts 编译器编译 js 文件\n    \"allowJs\": true,\n    // 跳过类型声明文件的类型检查\n    \"skipLibCheck\": true,\n    // es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异\n    \"esModuleInterop\": true,\n    // 允许通过 import x from \'y\' 即使模块没有显式指定 default 导出\n    \"allowSyntheticDefaultImports\": true,\n    // 开启严格模式\n    \"strict\": true,\n    // 对文件名称强制区分大小写\n    \"forceConsistentCasingInFileNames\": true,\n    // 为 switch 语句启用错误报告\n    \"noFallthroughCasesInSwitch\": true,\n    // 生成代码的模块化标准\n    \"module\": \"esnext\",\n    // 模块解析（查找）策略\n    \"moduleResolution\": \"node\",\n    // 允许导入扩展名为.json的模块\n    \"resolveJsonModule\": true,\n    // 是否将没有 import/export 的文件视为旧（全局而非模块化）脚本文件\n    \"isolatedModules\": true,\n    // 编译时不生成任何文件（只进行类型检查）\n    \"noEmit\": true,\n    // 指定将 JSX 编译成什么形式\n    \"jsx\": \"react-jsx\"\n  },\n  // 指定允许 ts 处理的目录\n  \"include\": [\"src\"]\n}\n```\n\n# typescript声明文件\n\n今天几乎所有的 JavaScript 应用都会引入许多第三方库来完成任务需求。\n\n这些第三方库不管是否是用 TS 编写的，最终都要编译成 JS 代码，才能发布给开发者使用。\n\n我们知道是 TS 提供了类型，才有了代码提示和类型保护等机制。 \n\n但在项目开发中使用第三方库时，你会发现它们几乎都有相应的 TS 类型，这些类型是怎么来的呢? `类型声明文件`\n\n- **类型声明文件：用来为已存在的 JS 库提供类型信息**\n\n这样在 TS 项目中使用这些库时，就像用 TS 一样，都会有代码提示、类型保护等机制了。\n\n1. TS 的两种文件类型\n2. 类型声明文件的使用说明\n\n## TS 中的两种文件类型\n\n- TS 中有两种文件类型：1 `.ts` 文件 2 `.d.ts` 文件\n- .ts 文件:\n  1. `既包含类型信息又可执行代码`\n  2. 可以被编译为 .js 文件，然后，执行代码\n  3. 用途：编写程序代码的地方\n- .d.ts 文件:\n  1. `只包含类型信息`的类型声明文件\n  2. **不会生成 .js 文件，仅用于提供类型信息,在.d.ts文件中不允许出现可执行的代码，只用于提供类型**\n  3. 用途：为 JS 提供类型信息\n\n- 总结：.ts 是 `implementation`(代码实现文件)；**.d.ts 是 declaration(类型声明文件)**\n- 如果要为 JS 库提供类型信息，要使用 `.d.ts` 文件\n\n## 类型声明文件的使用说明\n\n- 在使用 TS 开发项目时，类型声明文件的使用包括以下两种方式: \n  1. 使用已有的类型声明文件\n  2. 创建自己的类型声明文件\n\n使用已有的类型声明文件\n\n1. 内置类型声明文件\n2. 第三方库的类型声明文件\n3. 自己提供的\n\n## 内置类型声明文件\n\n- TS 为 JS 运行时可用的所有标准化内置 API 都提供了声明文件\n- 比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息:\n\n```ts\nconst strs = [\'a\', \'b\', \'c\']\n// 鼠标放在 forEach 上查看类型\nstrs.forEach\n```\n\n- 实际上这都是 TS 提供的内置类型声明文件\n- 可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看内置类型声明文件内容\n- 比如，查看 forEach 方法的类型声明，在 VSCode 中会自动跳转到 `lib.es5.d.ts` 类型声明文件中\n- 当然，像 window、document 等 BOM、DOM API 也都有相应的类型声明(`lib.dom.d.ts`)\n\n## 第三方库的类型声明文件 \n\n- 目前，几乎所有常用的第三方库都有相应的类型声明文件\n- 第三方库的类型声明文件有两种存在形式:1 库自带类型声明文件 2 由 DefinitelyTyped 提供。 \n\n1. 库自带类型声明文件：比如，axios\n\n  - 查看 `node_modules/axios` 目录\n\n解释：这种情况下，正常导入该库，**TS 就会自动加载库自己的类型声明文件**，以提供该库的类型声明。\n\n2. 由 DefinitelyTyped 提供\n\n- DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明\n- [DefinitelyTyped 链接](https://github.com/DefinitelyTyped/DefinitelyTyped/)\n- 可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为:`@types/*`\n- 比如，@types/react、@types/lodash 等\n- 说明：在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示\n\n```ts\nimport _ from \'lodash\'\n\n// 在 VSCode 中，查看 \'lodash\' 前面的提示\n```\n\n- 解释：当安装 `@types/*` 类型声明包后，**TS 也会自动加载该类声明包**，以提供该库的类型声明\n- 补充：TS 官方文档提供了一个页面，可以来查询 @types/* 库\n- [@types/* 库](https://www.typescriptlang.org/dt)\n\n## 创建自己的类型声明文件\n\n1. 项目内共享类型\n2. 为已有 JS 文件提供类型声明\n\n### 项目内共享类型\n\n- 如果多个 .ts 文件中都用到同一个类型，此时可以创建 .d.ts 文件提供该类型，实现类型共享。\n- 操作步骤:\n  1. 创建 index.d.ts 类型声明文件。\n  2. 创建需要共享的类型，并使用 export 导出(TS 中的类型也可以使用 import/export 实现模块化功能)。\n  3. 在需要使用共享类型的 .ts 文件中，通过 import 导入即可(.d.ts 后缀导入时，直接省略)。\n\n### 为已有 JS 文件提供类型声明\n\n1. 在将 JS 项目迁移到 TS 项目时，为了让已有的 .js 文件有类型声明。 \n2. 成为库作者，创建库给其他人使用。\n\n- 注意:类型声明文件的编写与模块化方式相关，不同的模块化方式有不同的写法。但由于历史原因，JS 模块化的发展 经历过多种变化(AMD、CommonJS、UMD、ESModule 等)，而 TS 支持各种模块化形式的类型声明。这就导致 ，类型声明文件相关内容又多又杂。\n- 演示:基于最新的 ESModule(import/export)来为已有 .js 文件，创建类型声明文件。 \n\n### 类型声明文件的使用说明\n\n- 说明:TS 项目中也可以使用 .js 文件。\n- 说明:在导入 .js 文件时，TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明。\n- declare 关键字:用于类型声明，为其他地方(比如，.js 文件)已存在的变量声明类型，而不是创建一个新的变量。\n  1. 对于 type、interface 等这些明确就是 TS 类型的(只能在 TS 中使用的)，可以省略 declare 关键字。\n  2. 对于 let、function 等具有双重含义(在 JS、TS 中都能用)，应该使用 declare 关键字，明确指定此处用于类型声明。\n\n\n\n```jsx\nlet count = 10\nlet songName = \'痴心绝对\'\nlet position = {\n  x: 0,\n  y: 0\n}\n\nfunction add(x, y) {\n  return x + y\n}\n\nfunction changeDirection(direction) {\n  console.log(direction)\n}\n\nconst fomartPoint = point => {\n  console.log(\'当前坐标：\', point)\n}\n\nexport { count, songName, position, add, changeDirection, fomartPoint }\n\n```\n\n定义类型声明文件\n\n```jsx\ndeclare let count:number\n\ndeclare let songName: string\n\ninterface Position {\n  x: number,\n  y: number\n}\n\ndeclare let position: Position\n\ndeclare function add (x :number, y: number) : number\n\ntype Direction = \'left\' | \'right\' | \'top\' | \'bottom\'\n\ndeclare function changeDirection (direction: Direction): void\n\ntype FomartPoint = (point: Position) => void\n\ndeclare const fomartPoint: FomartPoint\n\nexport {\n  count, songName, position, add, changeDirection, FomartPoint, fomartPoint\n}\n```\n\n\n\n# 在现有项目中添加 TS\n\n- [CRA 添加 ts 文档](https://create-react-app.dev/docs/adding-typescript)\n- 如果要在现有的 JS 项目中，添加 TS，需要以下操作：\n\n1. 安装包：`yarn add typescript @types/node @types/react @types/react-dom @types/jest`\n2. 把 `jsconfig.json`改成 path.tsconfig.json\n4. 将原来通过 React 脚手架创建的 TS 项目中的 tsconfig.json 中的配置，拷贝到咱们自己的项目中\n5. 创建 `path.tsconfig.json` 文件，将原来 `jsconfig.json` 文件中的内容拿过来\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"],\n      \"@scss/*\": [\"src/assets/styles/*\"]\n    }\n  }\n}\n\n```\n\n5. 在 `tsconfig.json` 中，添加以下配置：\n\n```json\n{\n  // 添加这一句\n  \"extends\": \"./path.tsconfig.json\",\n\n  \"compilerOptions\": {\n    ...\n  }\n}\n```\n\n6. 将通过 React 脚手架创建的 TS 项目中的 `src/react-app-env.d.ts` 拷贝到咱们自己项目的 src 目录下\n7. 重启项目\n\n## 说明\n\n1. 项目中使用 TS 时，既可以包含 js 文件，又可以包含 ts 文件\n  - `.js`、`.jsx`（使用 JS 时，React 组件对应的文件后缀）\n  - `.ts`、`.tsx`（使用 TS 时，React 组件对应的文件后缀）、`.d.ts`\n2. 在已有项目中，添加 TS 时的推荐模式\n  - 新的功能用 TS\n  - 已实现的功能，可以继续保持 JS 文件，慢慢修改为 TS 即可\n3. React 组件对应的文件后缀，修改为：`.tsx`\n4. 工具函数对应的文件后缀，修改为：`.ts` 或者为其添加类型声明文件 `.d.ts`\n\n\n\n# 项目改造\n\n## 改造建议\n\n1. 项目中使用 TS 时，既可以包含 js 文件，又可以包含 ts 文件\n\n  - `.js`、`.jsx`（使用 JS 时，React 组件对应的文件后缀）\n  - `.ts`、`.tsx`（使用 TS 时，React 组件对应的文件后缀）、`.d.ts`\n\n2. 在已有项目中，添加 TS 时的推荐模式\n\n  - 新的功能用 TS\n  - 已实现的功能，可以继续保持 JS 文件，慢慢修改为 TS 即可\n\n3. React 组件对应的文件后缀，修改为：`.tsx`\n4. 工具函数对应的文件后缀，修改为：`.ts` 或者为其添加类型声明文件 `.d.ts`\n\n## 修改入口文件\n\n### index.ts\n\n- 直接将文件后缀修改为 index.tsx 即可\n- 需要重启项目\n\n## 修改App.js\n\n+ 讲App.js 改成app.tsx即可\n+ 需要安装react-router-dom的类型\n\n```tsx\nyarn add @types/react-router-dom\n```\n\n+ 重启\n\n# utils工具函数改造\n\n## history.js\n\n不需要改造，直接把js改成ts即可\n\n## storage.js\n\n+ 讲js改成ts\n+ 修改getTokenInfo\n\n```jsx\n/**\n * 从本地缓存中获取 Token 信息\n * JSON.parse() 要求参数必须是字符串\n * localStorage.getItem() 返回值可能是字符串，也可能是null，所以会报错\n */\nexport const getTokenInfo = () => {\n  return JSON.parse(localStorage.getItem(TOKEN_KEY) || \'{}\')\n}\n```\n\n### 非空断言\n\n[Non-null assertion operator](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator)\n\n- TS 中提供一个运算符：`!` `非空断言`\n  - 如果一个值，它的类型可能是 null 或 undefined，但是，我们在使用时又很确定它的值一定不是 null 或 unde，此时，就可以通过 `非空断言` 来告诉 TS 听哥的，哥很确定它的不是 null 或 undefined\n- 注意：**这个操作是风险的**，非空断言，仅仅是让 TS 中的类型检查不再校验 null 或 undefined，但是，如果它的值真的是 null 或 undefined，代码会在运行时报错！！！\n\n### 整体修改\n\n```jsx\n// 用户 Token 的本地缓存键名\nconst TOKEN_KEY = \'geek-itcast-21\'\nconst CHANNEL_KEY = \'geek-itcast-21-channels\'\ntype Token = {\n  token: string\n  refresh_token: string\n}\ntype Channels = {\n  id: number\n  name: string\n}[]\n/**\n * 从本地缓存中获取 Token 信息\n * JSON.parse() 要求参数必须是字符串\n * localStorage.getItem() 返回值可能是字符串，也可能是null，所以会报错\n */\nexport const getTokenInfo = (): Token => {\n  return JSON.parse(localStorage.getItem(TOKEN_KEY)!) || {}\n}\n\n/**\n * 将 Token 信息存入缓存\n * @param {Object} tokenInfo 从后端获取到的 Token 信息\n */\nexport const setTokenInfo = (tokenInfo: Token): void => {\n  localStorage.setItem(TOKEN_KEY, JSON.stringify(tokenInfo))\n}\n\n/**\n * 删除本地缓存中的 Token 信息\n */\nexport const removeTokenInfo = () => {\n  localStorage.removeItem(TOKEN_KEY)\n}\n\n/**\n * 判断本地缓存中是否存在 Token 信息\n */\nexport const hasToken = (): boolean => {\n  return !!getTokenInfo().token\n}\n\n/**\n * 保存频道数据到本地\n * @param {*} channels\n */\nexport const setLocalChannels = (channels: Channels): void => {\n  localStorage.setItem(CHANNEL_KEY, JSON.stringify(channels))\n}\n\n/**\n * 获取本地的频道数据，，，，，，，如果没有数据，不要默认为空数组\n * @returns\n */\nexport const getLocalChannels = (): Channels => {\n  return JSON.parse(localStorage.getItem(CHANNEL_KEY)!)\n}\n\n/**\n * 删除本地的频道数据\n */\nexport const removeLocalChannels = (): void => {\n  localStorage.removeItem(CHANNEL_KEY)\n}\n\n```\n\n## request.js改造\n\n讲js改成ts即可\n\n```tsx\nasync (err: AxiosError<{ message: string }>) => {\n    // 如果因为网络原因，response没有，给提示消息\n    if (!err.response) {\n      Toast.info(\'网络繁忙，请稍后重试\')\n      return Promise.reject(err)\n    }\n\n```\n\n\n\n# 通用组件改造\n\n## Icon组件修改\n\n```jsx\nimport React from \'react\'\nimport classNames from \'classnames\'\n\ntype Props = {\n  type: string\n  className?: string\n  onClick?: () => void\n}\nfunction Icon({ type, className, ...rest }: Props) {\n  return (\n    <svg {...rest} className={classNames(\'icon\', className)} aria-hidden=\"true\">\n      <use xlinkHref={`#${type}`}></use>\n    </svg>\n  )\n}\n\nexport default Icon\n\n```\n\n## typescript中ref的使用\n\n```jsx\nconst imgRef = useRef<HTMLImageElement>(null)\n\nconst current = imgRef.current!\n```\n\n## Img懒加载组件修改\n\n```jsx\nimport classnames from \'classnames\'\nimport { useEffect, useRef, useState } from \'react\'\nimport Icon from \'../Icon\'\nimport styles from \'./index.module.scss\'\ntype Props = {\n  src: string\n  className?: string\n  alt?: string\n}\nconst Image = ({ className, src, alt }: Props) => {\n  const imgRef = useRef<HTMLImageElement>(null)\n  // 控制是否在加载\n  const [loading, setLoading] = useState(true)\n  // 控制是否加载失败\n  const [error, setError] = useState(false)\n\n  // 加载成功\n  const onLoad = () => {\n    setError(false)\n    setLoading(false)\n  }\n  const onError = () => {\n    setLoading(false)\n    setError(true)\n  }\n  useEffect(() => {\n    // 监听图片\n    const observer = new IntersectionObserver(([{ isIntersecting }]) => {\n      if (isIntersecting) {\n        // 图片在可视区\n        const current = imgRef.current!\n        current.src = current.dataset.src!\n        // 取消监听\n        observer.unobserve(current)\n      }\n    })\n    observer.observe(imgRef.current!)\n  }, [])\n  return (\n    <div className={classnames(styles.root, className)}>\n      {/* 加载中 */}\n      {loading && (\n        <div className=\"image-icon\">\n          <Icon type=\"iconphoto\" />\n        </div>\n      )}\n\n      {/* 加载出错时显示的内容 */}\n      {error && (\n        <div className=\"image-icon\">\n          <Icon type=\"iconphoto-fail\" />\n        </div>\n      )}\n\n      <img\n        alt={alt}\n        ref={imgRef}\n        data-src={src}\n        onLoad={onLoad}\n        onError={onError}\n      />\n    </div>\n  )\n}\n\nexport default Image\n\n```\n\n## Input组件修改\n\n+ 基本改造\n\n```jsx\nimport React, { useEffect, useRef } from \'react\'\nimport styles from \'./index.module.scss\'\nimport classNames from \'classnames\'\ninterface Props {\n  extra?: string\n  onExtraClick?: () => void\n  className?: string\n  autoFocus?: boolean\n}\nexport default function Input({\n  extra,\n  onExtraClick,\n  className,\n  autoFocus,\n  ...rest\n}: Props) {\n  // focus\n  const inputRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    if (autoFocus) {\n      inputRef.current?.focus()\n    }\n  }, [autoFocus])\n  return (\n    <div className={styles.root}>\n      <input\n        ref={inputRef}\n        className={classNames(\'input\', className)}\n        {...rest}\n      />\n      {extra ? (\n        <div className=\"extra\" onClick={onExtraClick}>\n          {extra}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\n```\n\n+ 剩余参数的支持\n\n> InputHTMLAttributes中包含了Input框所有能够支持的属性\n\n```jsx\ninterface Props extends InputHTMLAttributes<HTMLInputElement> {\n  extra?: string\n  onExtraClick?: () => void\n  className?: string\n  autoFocus?: boolean\n}\n```\n\n+ 使用type替代interface\n\n```jsx\ntype Props = {\n  extra?: string\n  onExtraClick?: () => void\n  className?: string\n  autoFocus?: boolean\n  type?: \'input\' | \'password\'\n} & InputHTMLAttributes<HTMLInputElement>\n```\n\nTS 中的 &（交叉类型）\n\nhttps://www.typescriptlang.org/docs/handbook/2/objects.html#intersection-types\n\n- 交叉类型：`&`\n  - 作用：可以理解为取多个类型的并集\n- 联想到了，另一个类型：`|` 联合类型\n\n```ts\n// | 在 TS 中表示： number 和 string 两者中出现哪一个都行\ntype NumStr = number | string\n\ntype InputProps = {\n  extra?: string\n  onExtraClick?: () => void\n  className?: string\n  dom?: React.RefObject<HTMLInputElement>\n}\n\n// & 在 TS 中表示： 最终的类型两者都有\ntype Props = InputProps & InputHTMLAttributes<HTMLInputElement>\n```\n\n交叉类型需要注意的地方：同名的属性容易冲突\n\n使用omit优化\n\n```tsx\ntype Props = Omit<\n  InputHTMLAttributes<HTMLInputElement>,\n  \'type\' | \'autoFocus\'\n> & {\n  extra?: string\n  onExtraClick?: () => void\n  className?: string\n  autoFocus?: boolean\n  type?: \'text\' | \'password\'\n}\n```\n\n## Textarea组件改造\n\n```jsx\nimport classNames from \'classnames\'\nimport { TextareaHTMLAttributes } from \'hoist-non-react-statics/node_modules/@types/react\'\nimport React, { useEffect, useRef, useState } from \'react\'\nimport styles from \'./index.module.scss\'\ntype Props = Omit<\n  TextareaHTMLAttributes<HTMLTextAreaElement>,\n  \'maxLength\' | \'value\' | \'onChange\'\n> & {\n  maxLength?: number\n  className?: string\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void\n}\nexport default function Textarea({\n  maxLength = 100,\n  className,\n  value,\n  onChange,\n  ...rest\n}: Props) {\n  const [content, setContent] = useState(value || \'\')\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(e.target.value)\n\n    onChange && onChange(e)\n  }\n  const textRef = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    textRef.current!.focus()\n    textRef.current!.setSelectionRange(-1, -1)\n  }, [])\n  return (\n    <div className={styles.root}>\n      {/* 文本输入框 */}\n      <textarea\n        {...rest}\n        className={classNames(\'textarea\', className)}\n        maxLength={maxLength}\n        value={value}\n        onChange={handleChange}\n        ref={textRef}\n      />\n\n      {/* 当前字数/最大允许字数 */}\n      <div className=\"count\">\n        {content.length}/{maxLength}\n      </div>\n    </div>\n  )\n}\n\n```\n\n## NavBar组件改造\n\n```jsx\nimport Icon from \'@/components/Icon\'\nimport styles from \'./index.module.scss\'\nimport { useHistory } from \'react-router\'\nimport classNames from \'classnames\'\nimport { ReactNode } from \'react\'\n// import { withRouter } from \'react-router-dom\'\n// 1. withRouter的使用\n// history match location: 这个组件必须是通过路由配置的  <Route></Route>\n// 自己渲染的组件，无法获取到路由信息  <NavBar></NavBar>\n\n// 2. 路由提供了几个和路由相关的hook\n// useHistory  useLocation  useParams\ntype Props = {\n  children: string | ReactNode\n  extra?: string\n  onLeftClick?: () => void\n  className?: string\n}\nfunction NavBar({ children, extra, onLeftClick, className }: Props) {\n  const history = useHistory()\n  const back = () => {\n    console.log(\'123\')\n    // 跳回上一页\n    if (onLeftClick) {\n      onLeftClick()\n    } else {\n      history.go(-1)\n    }\n  }\n  return (\n    <div className={classNames(styles.root, className)}>\n      {/* 后退按钮 */}\n      <div className=\"left\">\n        <Icon type=\"iconfanhui\" onClick={back} />\n      </div>\n      {/* 居中标题 */}\n      <div className=\"title\">{children}</div>\n\n      {/* 右侧内容 */}\n      <div className=\"right\">{extra}</div>\n    </div>\n  )\n}\n\nexport default NavBar\n\n```\n\n## AuthRoute组件改造\n\nhttps://stackoverflow.com/questions/53104165/implement-react-router-privateroute-in-typescript-project/53111155#\n\n```jsx\nimport { hasToken } from \'@/utils/storage\'\nimport { Route, Redirect, useLocation, RouteProps } from \'react-router-dom\'\ninterface PrivateRouteProps extends RouteProps {\n  component: React.ComponentType<any>\n}\nexport default function AuthRoute(props: PrivateRouteProps) {\n  const { component: Component, ...rest } = props\n  const location = useLocation()\n  // console.log(location)\n  return (\n    <Route\n      {...rest}\n      render={() => {\n        if (hasToken()) {\n          return <Component></Component>\n        } else {\n          return (\n            <Redirect\n              to={{\n                pathname: \'/login\',\n                state: {\n                  // 从哪儿来的\n                  from: location.pathname,\n                },\n              }}\n            ></Redirect>\n          )\n        }\n      }}\n    ></Route>\n  )\n}\n\n```\n\n# 页面改造\n\n## Layout组件\n\n直接把js改成tsx\n\n# Login组件\n\n### location的处理\n\n![image-20210917205318957](images/image-20210917205318957.png)\n\n+ 关于useLocation的使用\n\n```jsx\ntype LocationState = {\n  from: string\n}\n\nconst location = useLocation<LocationState>()\n```\n\nhttps://stackoverflow.com/questions/61668623/react-typescript-correct-type-for-uselocation-from-react-router-dom\n\n### redux-action修改\n\n+ 修改action/login.js\n\n```jsx\nimport request from \'@/utils/request\'\nimport { setTokenInfo, removeTokenInfo } from \'@/utils/storage\'\nimport { Dispatch } from \'redux\'\ntype Token = {\n  token: string\n  refresh_token: string\n}\nexport const sendCode = (mobile: string) => {\n  return async () => {\n    // 发送请求\n    await request({\n      url: \'/sms/codes/\' + mobile,\n      method: \'get\',\n    })\n  }\n}\n\nexport const saveToken = (payload: Token) => {\n  return {\n    type: \'login/token\',\n    payload,\n  }\n}\n\n/**\n * 登录功能\n * @param {*} data\n * @returns\n */\n\nexport const login = (data: { mobile: string; code: string }) => {\n  return async (dispatch: Dispatch) => {\n    const res = await request({\n      method: \'post\',\n      url: \'/authorizations\',\n      data,\n    })\n    // 保存token到redux中\n    dispatch(saveToken(res.data))\n    // 保存到本地\n    setTokenInfo(res.data)\n  }\n}\n\n/**\n * 退出\n * @returns\n */\nexport const logout = () => {\n  return (dispatch: Dispatch) => {\n    removeTokenInfo()\n    dispatch({\n      type: \'login/logout\',\n    })\n  }\n}\n\n```\n\n+ Dispatch的分析\n\n索引签名\n\n- [索引签名](https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures)\n- 语法：`[key: string]: any`\n- 应用场景：我要使用一个对象类型，但是，我不确定对象中有什么属性，此时，就可以使用索引签名类型了\n\n```ts\n// 可以将这个内容分为两部分，\n//  冒号前面 `[extraProps: string]` 表示对象中的属性类型 - 键\n//  冒号后面 `any` 表示属性值的类型 - 值\n\n// [extraProps: string] 表示：\n//  extraProps 是一个任意合法属性名称，比如，可以叫：k 或 key\n//  : string 表示对象属性的类型是 字符串 类型\n\n// 注意：一个对象，它的属性类型可以是： string | number | symbol\ninterface AnyAction {\n  [extraProps: string]: any\n}\n\nexport interface AnyAction extends Action {\n  // Allows any extra properties to be defined in an action.\n  [extraProps: string]: any\n}\n```\n\n\n\n### redux-reducer修改\n\n```jsx\ntype Token = {\n  token: string\n  refresh_token: string\n}\ntype ActionType = {\n  type: \'login/token\' | \'login/logout\'\n  payload: Token\n}\nconst initValue: Token = {\n  token: \'\',\n  refresh_token: \'\',\n}\nexport default function reducer(state = initValue, action: ActionType) {\n  const { type, payload } = action\n  if (type === \'login/token\') {\n    return payload\n  }\n  if (type === \'login/logout\') {\n    return {}\n  }\n  return state\n}\n```\n\n### 类型提取\n\n+ types.d.ts\n\n```jsx\n/**\n * token的类型\n */\nexport type Token = {\n  token: string\n  refresh_token: string\n}\n\n```\n\n\n\n\n\n# Profile组件改造\n\n## 修改redux-reducer\n\n```jsx\ntype User = {\n  id: string\n  name: string\n  photo: string\n  art_count: number\n  follow_count: number\n  fans_count: number\n  like_count: number\n}\n\ntype Profile = {\n  id: string\n  photo: string\n  name: string\n  mobile: string\n  gender: number\n  birthday: string\n}\n\ntype InitType = {\n  user: User\n  profile: Profile\n}\n\ntype ProfileAction =\n  | {\n      type: \'profile/user\'\n      payload: User\n    }\n  | {\n      type: \'profile/profile\'\n      payload: Profile\n    }\n\nconst initValue: InitType = {\n  user: {},\n  profile: {},\n} as InitType\n\n/**\n * 处理个人信息的reducer\n * @param {*} state\n * @param {*} action\n * @returns\n */\nexport default function reducer(state = initValue, action: ProfileAction) {\n  // const { type, payload } = action\n  if (action.type === \'profile/user\') {\n    return {\n      ...state,\n      user: action.payload,\n    }\n  }\n  if (action.type === \'profile/profile\') {\n    return {\n      ...state,\n      profile: action.payload,\n    }\n  }\n  return state\n}\n\n```\n\n\n\n## 修改redux-action的修改\n\n```jsx\nimport http from \'@/utils/request\'\nimport { User, Profile, ProfileAction } from \'../reducers/profile\'\nimport { Dispatch } from \'redux\'\n/**\n * 保存用户信息\n * @param {*} payload\n * @returns\n */\n// actionCreator: 创建action  必须要符合 ProfileAction类型\nexport const saveUser = (payload: User): ProfileAction => {\n  return {\n    type: \'profile/user\',\n    payload: payload,\n  }\n}\n\n/**\n * 获取用户信息\n * @returns Promise\n */\nexport const getUser = () => {\n  return async (dispatch: Dispatch) => {\n    const res = await http.get(\'/user\')\n    dispatch(saveUser(res.data))\n  }\n}\n\nexport const saveProfile = (payload: Profile): ProfileAction => {\n  return {\n    type: \'profile/profile\',\n    payload,\n  }\n}\n\nexport const getProfile = () => {\n  return async (dispatch: Dispatch) => {\n    const res = await http.get(\'/user/profile\')\n    dispatch(saveProfile(res.data))\n  }\n}\n\n// 返回一个全部属性变成可选的类型\ntype PartialProfile = Partial<Profile>\n// 修改用户的信息\n// dispatch: Dispatch类型，，，参数必须符合Action类型 {type: T}\nexport const updateProfile = (data: PartialProfile) => {\n  return async (dispatch: any) => {\n    await http.patch(\'/user/profile\', data)\n    dispatch(getProfile())\n  }\n}\n\nexport const updatePhoto = (fd: FormData) => {\n  return async (dispatch: any) => {\n    await http.patch(\'/user/photo\', fd)\n    dispatch(getProfile())\n  }\n}\n\n```\n\n\n\n## 泛型工具类型 - ReturnType\n\nhttps://stackoverflow.com/questions/57472105/react-redux-useselector-typescript-type-for-state/57472389\n\n- 泛型：\n\n```ts\nfunction id<Type>(value: Type): Type {\n  return value\n}\n\n// 尖括号中出现的是 类型\nid<number>(1)\nid<string>(1)\n```\n\n- ReturnType\n  - 作用：**用来获取函数返回值的类型**\n\n```ts\nconst fn = () => 10\n\n// typeof fn 的结果： () => number\n// R1 => number\ntype R1 = ReturnType<typeof fn>\n// type R1 = ReturnType<() => number>\n```\n\n## 获取redux状态的类型\n\nhttps://redux.js.org/usage/usage-with-typescript\n\n+ 讲store/index.js修改为store/index.ts\n\n```jsx\n// 参数1：reducer\n// 参数2：指定store的初始值\n// 参数3：指定中间件\nconst store = createStore(\n  reducer,\n  {\n    login: getTokenInfo(),\n  },\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport type RootState = ReturnType<typeof store.getState>\n```\n\n## useSelector 的类型\n\n```ts\n// 在 TS 中 useSelector 是一个泛型函数，并且它有两个泛型变量，分别是：\n// 1 整个Redux应用的状态类型\n// 2 当前要获取的状态类型\n// 因此，在使用的时候，需要传入两个 泛型变量：\n// 比如，以下代码中，\n// 第一个传入了 AppState 也就是整个 Redux 应用的状态类型\n// 第二个传入了 AppState[\'profile\'] 也就是当前要获取的 profile 状态的类型\n\nconst user = useSelector<RootState, RootState[\'profile\'][\'user\']>(\n  (state) => state.profile.user\n)\n\n\n// 泛型参数1：指定state的类型\n// 泛型参数2：指定返回值的类型\nconst user = useSelector((state: RootState) => state.profile.user)\n```\n\n\n\n## TS 中的索引查询类型\n\n- 语法：`对象类型[键]`\n- 作用：查询 对象类型 中某个属性对应的类型\n\n```ts\ntype A = {\n  name: string\n}\n\n// NameType => string\ntype NameTyep = A[\'name\']\n```\n\n\n\n# Home组件的修改\n\n## 修改home组件-reducer\n\n```jsx\nimport {\n  SAVE_ALL_CHANNELS,\n  SAVE_ARTICLE_LIST,\n  SAVE_CHANNELS,\n  SAVE_MORE_ARTICLE_LIST,\n} from \'../action_types/home\'\n\ntype Channel = {\n  id: number\n  name: string\n}\n\ntype MoreAction = {\n  visible: boolean\n  articleId: string\n  channelId: string\n}\n\ntype Ariticle = {\n  art_id: string\n  title: string\n  aut_id: string\n  aut_name: string\n  comm_count: string\n  pubdate: string\n  cover: {\n    type: string\n    images: string[]\n  }\n}\n\ntype Articles = {\n  [index: number]: {\n    timestamp: string\n    list: Ariticle[]\n  }\n}\ntype HomeType = {\n  userChannels: Channel[]\n  allChannels: Channel[]\n  moreAction: MoreAction\n  articles: Articles\n}\n\nconst initValue: HomeType = {\n  userChannels: [],\n  allChannels: [],\n  // 存储所有的文章列表\n  articles: {},\n  moreAction: {\n    visible: false,\n    articleId: \'\',\n    channelId: \'\',\n  },\n} as HomeType\nexport default function reducer(state = initValue, action) {}\n```\n\n## 修改home组件-reducer的修改-完成\n\n```jsx\nimport {\n  SAVE_ALL_CHANNELS,\n  SAVE_ARTICLE_LIST,\n  SAVE_CHANNELS,\n  SAVE_MORE_ARTICLE_LIST,\n} from \'../action_types/home\'\n\ntype Channel = {\n  id: number\n  name: string\n}\n\ntype MoreAction = {\n  visible: boolean\n  articleId: string\n  channelId: number\n}\n\ntype Ariticle = {\n  art_id: string\n  title: string\n  aut_id: string\n  aut_name: string\n  comm_count: string\n  pubdate: string\n  cover: {\n    type: string\n    images: string[]\n  }\n}\n\ntype Articles = {\n  [index: number]: {\n    timestamp: string\n    list: Ariticle[]\n  }\n}\ntype HomeType = {\n  userChannels: Channel[]\n  allChannels: Channel[]\n  moreAction: MoreAction\n  articles: Articles\n}\n\nconst initValue: HomeType = {\n  userChannels: [],\n  allChannels: [],\n  // 存储所有的文章列表\n  articles: {},\n  moreAction: {\n    visible: false,\n    articleId: \'\',\n    channelId: -1,\n  },\n} as HomeType\n\ntype ActionType =\n  | {\n      type: \'home/saveChannels\'\n      payload: Channel[]\n    }\n  | {\n      type: \'home/saveAllChannels\'\n      payload: Channel[]\n    }\n  | {\n      type: \'home/saveArticleList\'\n      payload: {\n        channelId: number\n        timestamp: string\n        list: Ariticle[]\n      }\n    }\n  | {\n      type: \'home/saveMoreArticleList\'\n      payload: {\n        channelId: number\n        timestamp: string\n        list: Ariticle[]\n      }\n    }\n  | {\n      type: \'home/setMoreAction\'\n      payload: MoreAction\n    }\nexport default function reducer(state = initValue, action: ActionType) {\n  // const { type, payload } = action\n  switch (action.type) {\n    case \'home/saveChannels\':\n      return {\n        ...state,\n        userChannels: action.payload,\n      }\n    case \'home/saveAllChannels\':\n      return {\n        ...state,\n        allChannels: action.payload,\n      }\n    case \'home/saveArticleList\':\n      const { list, timestamp, channelId } = action.payload\n\n      return {\n        ...state,\n        articles: {\n          ...state.articles,\n          [channelId]: {\n            timestamp: timestamp,\n            // 如果是loadMore，追加数据，否则，覆盖数据\n            list: list,\n          },\n        },\n      }\n    case \'home/saveMoreArticleList\':\n      // const oldList = state.articles[action.payload.channelId].list\n      return {\n        ...state,\n        articles: {\n          ...state.articles,\n          [action.payload.channelId]: {\n            timestamp: action.payload.timestamp,\n            list: [\n              ...state.articles[action.payload.channelId].list,\n              ...action.payload.list,\n            ],\n          },\n        },\n      }\n    case \'home/setMoreAction\': {\n      return {\n        ...state,\n        moreAction: action.payload,\n      }\n    }\n    default:\n      return state\n  }\n}\n\n```\n\n## 解决问题：request中dispatch的问题\n\n原因： saveToken没有指定返回值类型，\n\n```jsx\n\n// actionCreator\nexport const saveToken = (payload: Token) => {\n  return {\n    type: \'login/token\',\n    payload,\n  }\n}\n```\n\n把type推断为string类型   string类型无法常量类型赋值，所以报错了\n\n解决方案：\n\n```js\n// actionCreator\nexport const saveToken = (payload: Token) => {\n  return {\n    type: \'login/token\' as const,\n    payload,\n  }\n}\n```\n\n方案2：\n\n```jsx\n// actionCreator\nexport const saveToken = (payload: Token): LoginAction => {\n  return {\n    type: \'login/token\',\n    payload,\n  }\n}\n\n```\n\n## 解决问题：logout的错误\n\n原因：store.dispatch的参数必须是一个对象，且要有type属性\n\n```jsx\n/**\n * 退出\n * @returns\n */\nexport const logout = (payload: Token) => {\n  return {\n    type: \'login/logout\' as const,\n    payload,\n  }\n}\n\n\n// 移除本地的token\nremoveTokenInfo()\nstore.dispatch(\n  logout({\n    token: \'\',\n    refresh_token: \'\',\n  })\n)\n```\n\n## RootThunkAction的使用\n\nhttps://redux.js.org/usage/usage-with-typescript#type-checking-redux-thunks\n\n场景：\n\n 我们如果需要使用redux-thunk的action，需要指定两个参数的类型，dispatch和getState的类型。\n\nredux-thunk中间件帮助我们提供了一个thunkAction的类型。\n\n```jsx\n// 获取RootState的类型‘\n// typeof: 获取store.getState的类型\n// ReturnType 获取返回值的类型\nexport type RootState = ReturnType<typeof store.getState>\n\n// R：thunk的action的返回类型  void Promise<void>\n// S: 需要指定个getState的返回类型  RootState\n// E: extra: 额外的参数 any\n// A: 需要指定Action的类型 Action AnyAction [extraProps: string]: any\n// ThunkAction<R, S, E, A>\nexport type RootThunkAction = ThunkAction<\n  Promise<void>,\n  RootState,\n  unknown,\n  AnyAction\n>\n\n```\n\n\n\n以后，只要是redux-thunk的action的类型，我们只需要指定返回类型为RootThunkAction类型即可，不需要指定dispatch和getState的类型\n\n```jsx\n/**\n * 获取用户的频道\n * @returns\n */\nexport const getUserChannels = (): RootThunkAction => {\n  return async (dispatch) => {\n    // 1. 判断用户是否登录\n    if (hasToken()) {\n      const res = await request.get(\'/user/channels\')\n      dispatch(saveUserChannels(res.data.channels))\n    } else {\n      // 2. 没有token,从本地获取频道数据\n      const channels = getLocalChannels()\n      if (channels) {\n        // 没有token，但本地有channels数据\n        dispatch(saveUserChannels(channels))\n      } else {\n        // 没有token, 且本地没有channels数据\n        const res = await request.get(\'/user/channels\')\n        dispatch(saveUserChannels(res.data.channels))\n        // 保存到本地\n        setLocalChannels(res.data.channels)\n      }\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (7, 7,
        '# 极客园PC\n\n## 项目介绍\n\n### 资料\n\n- 短信接收&M端演示：http://geek.itheima.net/\n- PC 端接口文档：http://geek.itheima.net/api-pc.html\n\n### 项目介绍\n\n>「极客园」对标`CSDN`、`博客园`等竞品，致力成为更加贴近年轻 IT 从业者（学员）的科技资讯类应用  \n> 产品关键词：IT、极客、活力、科技、技术分享、前沿动态、内容社交  \n> 用户特点：年轻有活力，对IT领域前言科技信息充满探索欲和学习热情\n\n- 极客园 PC 端项目：个人自媒体管理端\n- 项目演示\n- 项目功能，包括\n  - 登录\n  - 首页\n  - 内容（文章）管理\n    - 文章列表\n    - 发布文章\n    - 修改文章\n- 技术栈：\n  - `react` v17.0.2 / `react-dom` v17.0.2\n  - ajax请求库：`axios`\n  - 路由：`react-router-dom` 以及 `history`\n  - 富文本编辑器：`react-quill`\n  - CSS 预编译器：`sass`\n  - UI 组件库：`antd` v4\n  - 项目搭建：React 官方脚手架 `create-react-app`\n\n## 项目搭建\n\n### 创建项目\n\n1. 使用 React CLI 搭建项目：`npx create-react-app geek-pc-21`\n2. 进入项目根目录：`cd geek-pc-21`\n3. 启动项目：`yarn start`\n4. 调整项目目录结构：\n\n```\n/src\n  /assets         项目资源文件，比如，图片 等\n  /components     通用组件\n  /pages          页面\n  /utils          工具，比如，token、axios 的封装等、\n  /api            封装接口\n  \n  App.js          根组件\n  index.css       全局样式\n  index.js        项目入口\n```\n\n### 使用git管理项目\n\nhttps://gitee.com/hucongcong/geek-pc-hz21/tree/master\n\n### 配置基础路由\n\n+ 安装路由：`yarn add react-router-dom`\n\n+ 在 pages 目录中创建两个页面：Login、Layout\n\n`src/pages/Layout/index.js`\n\n```jsx\nimport { Component } from \'react\'\n\nclass Layout extends Component {\n  render() {\n    return <div className=\"layout\">首页布局</div>\n  }\n}\n\nexport default Layout\n\n```\n\n`src/pages/Login/index.js`\n\n```jsx\nimport { Component } from \'react\'\n\nclass Login extends Component {\n  render() {\n    return <div className=\"login\">登录页</div>\n  }\n}\n\nexport default Login\n\n```\n\n+ 在 App 组件中，导入路由组件以及两个页面组件，配置路由规则\n\n```js\n// 导入路由\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \'react-router-dom\'\n\n// 导入页面组件\nimport Login from \'./pages/Login\'\nimport Layout from \'./pages/Layout\'\n\n// 配置路由规则\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        {/* 路由规则 */}\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/home\"></Redirect>\n          <Route path=\"/home\" component={Layout}></Route>\n          <Route path=\"/login\" component={Login}></Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n```\n\n+ 点击http://localhost:3000/login测试\n\n### 组件库 - antd\n\n[Ant Design](https://ant.design/index-cn)\n\n[antd PC 端组件库文档](https://ant.design/docs/react/introduce-cn)\n\n> `antd` 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。\n>\n> **开箱即用**\n\n1. 安装：`yarn add antd`\n2. 使用：\n\n```js\n// 1 在 index.js 中导入 antd 的样式文件\nimport \'antd/dist/antd.css\'\n\n// 2 在 Login 页面组件中，使用 antd 的 Button 组件\nimport { Button } from \'antd\'\n\nconst Login = () => (\n  <div>\n    <Button type=\"primary\">Button</Button>\n  </div>\n)\n```\n\n\n## 项目功能 - 登录  \n\n功能如下：\n\n1. 搭建登录页面结构\n2. 登录表单校验\n3. 登录逻辑\n4. 封装处理 token、axios 的工具函数\n5. 登录访问控制\n\n![image-20210824155646620](https://gitee.com/qarabala/jikeyuanpc-docs/raw/master/mds/https://gitee.com/qarabala/jikeyuanpc-docs/raw/master/mds/images/image-20210824155646620.png)\n\n### 创建git分支\n\n### 基本结构\n\n+ Card组件的使用\n\n```jsx\nimport { Card } from \'antd\'\n\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n        <Card className=\"login-container\">\n          <p>Card content</p>\n          <p>Card content</p>\n          <p>Card content</p>\n        </Card>\n      </div>\n    )\n  }\n}\n\n```\n\n+ 准备样式`src/pages/Login/index.css`\n\n```css\n.login {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-image: url(../../assets/login.png);\n}\n\n.login-container {\n  width: 440px;\n  height: 360px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n\n```\n\n+ 准备logo\n\n```diff\n+ import logo from \'../../assets/logo.png\'\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n        <Card className=\"login-container\">\n+          <img className=\"login-logo\" src={logo} alt=\"\" />\n        </Card>\n      </div>\n    )\n  }\n}\n```\n\n+ 准备logo的样式\n\n```css\n.login-logo {\n  width: 200px;\n  height: 60px;\n  display: block;\n  margin: 0 auto 20px;\n}\n```\n\n### 绝对路径的使用\n\n+ 官网文档：<https://facebook.github.io/create-react-app/docs/importing-a-component#absolute-imports>\n+ 在根目录新建`jsconfig.json`文件\n+ 配置以下内容\n\n```js\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n+ 使用绝对路径\n\n```js\nimport logo from \'assets/logo.png\'\n\n相当于\n\'src/assets/logo.png\'\n```\n\n+ `重启项目`\n\n### sass的使用\n\n在react脚手架中已经有了sass的配置，因此只需要安装sass的依赖包，就可以直接使用sass了\n\n+ 安装sass依赖包\n\n```js\nyarn add sass -D\n```\n\n+ 把`index.css`改成`index.scss`\n+ 导入`index.scss`文件\n\n**注意：如果使用了scss，scss中使用图片的绝对路径的时候需要加上~**\n\n```css\nbackground-image: url(~assets/login.png);\n```\n\n### 登录表单的使用\n\n> 根据antd的表单组件进行修改https://ant.design/components/form-cn/#API\n\n```jsx\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n        <Card className=\"login-container\">\n          <img className=\"login-logo\" src={logo} alt=\"\" />\n          {/* 表单 */}\n          <Form name=\"basic\">\n            <Form.Item name=\"username\">\n              <Input placeholder=\"请输入手机号\" />\n            </Form.Item>\n\n            <Form.Item name=\"password\">\n              <Input placeholder=\"请输入验证码\" />\n            </Form.Item>\n\n            <Form.Item name=\"remember\" valuePropName=\"checked\">\n              <Checkbox>我已阅读并同意[用户协议]和[隐私条款]</Checkbox>\n            </Form.Item>\n\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" block>\n                登录\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    )\n  }\n}\n```\n\n+ 调整表单控件的大小\n\n```jsx\n<Form name=\"basic\" size=\"large\">\n```\n\n+ 设置选中后的样式\n\n```css\n.ant-checkbox-wrapper-checked span {\n  color: #1890ff;\n}\n\n```\n\n### 登录表单校验\n\n```js\n<Form.Item\n  name=\"username\"\n  rules={[\n    {\n      pattern: /^1[3-9]\\d{9}$/,\n      message: \'手机号码格式不对\',\n    },\n    { required: true, message: \'请输入手机号\' },\n  ]}\n>\n  <Input placeholder=\"请输入手机号\" />\n</Form.Item>\n\n<Form.Item\n  name=\"password\"\n  rules={[\n    {\n      pattern: /^\\d{6}$/,\n      message: \'验证码格式不对\',\n    },\n    { required: true, message: \'请输入验证码\' },\n  ]}\n>\n  <Input placeholder=\"请输入验证码\" />\n</Form.Item>\n\n<Form.Item\n  name=\"remember\"\n  valuePropName=\"checked\"\n  rules={[{ required: true, message: \'请阅读协议\' }]}\n>\n  <Checkbox>我已阅读并同意[用户协议]和[隐私条款]</Checkbox>\n</Form.Item>\n\n```\n\n### 收集表单数据\n\n+ 给表单注册事件\n\n```jsx\n<Form\n  size=\"large\"\n  validateTrigger={[\'onChange\', \'onBlur\']}\n  onFinish={this.onFinish}\n>\n```\n\n+ 提供事件处理函数\n\n```jsx\nonFinish = (values) => {\n  console.log(values)\n}\n```\n\n+ 修改name属性\n\n```diff\n<Form.Item\n+  name=\"mobile\"\n  rules={[\n    {\n      pattern: /^1[3-9]\\d{9}$/,\n      message: \'手机号码格式不对\',\n    },\n    { required: true, message: \'请输入手机号\' },\n  ]}\n>\n  <Input placeholder=\"请输入手机号\" />\n</Form.Item>\n\n<Form.Item\n+  name=\"code\"\n  rules={[\n    {\n      pattern: /^\\d{6}$/,\n      message: \'验证码格式不对\',\n    },\n    { required: true, message: \'请输入验证码\' },\n  ]}\n>\n  <Input placeholder=\"请输入验证码\" />\n</Form.Item>\n\n<Form.Item\n+  name=\"agree\"\n  valuePropName=\"checked\"\n  rules={[{ required: true, message: \'请阅读协议\' }]}\n>\n  <Checkbox>我已阅读并同意[用户协议]和[隐私条款]</Checkbox>\n</Form.Item>\n```\n\n### 设置 默认值\n\n```jsx\n<Form\n  name=\"basic\"\n  size=\"large\"\n  onFinish={this.login}\n  initialValues={{\n    agree: true,\n    mobile: \'13811111111\',\n    code: \'246810\',\n  }}\n>\n```\n\n### 封装axios 的工具函数\n\n+ 安装axios\n\n```jsx\nyarn add axios\n```\n\n+ 新建文件`utils/request.js`\n\n```jsx\nimport axios from \'axios\'\n\nconst instance = axios.create({\n  baseURL: \'http://geek.itheima.net/\',\n  timeout: 5000,\n})\n\n// 请求拦截器\ninstance.interceptors.request.use(\n  function (config) {\n    return config\n  },\n  function (error) {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\ninstance.interceptors.response.use(\n  function (response) {\n    return response.data\n  },\n  function (error) {\n    return Promise.reject(error)\n  }\n)\n\nexport default instance\n\n```\n\n+ 测试\n\n### api封装\n\n+ 新建文件 `src/api/user.js`\n\n```js\nimport request from \'utils/request\'\n\n/**\n * 登录请求，用于用户登录\n * @param {string} mobile 手机号\n * @param {string} code 验证码\n * @returns Promise\n */\nexport const login = (mobile, code) => {\n  return request({\n    method: \'POST\',\n    url: \'/authorizations\',\n    data: {\n      mobile,\n      code,\n    },\n  })\n}\n```\n\n+ 发送请求进行登录\n\n```jsx\nsubmit = async (values) => {\n  const { mobile, code } = values\n  try {\n    const res = await login(mobile, code)\n    // 存储token\n    localStorage.setItem(\'itcast_geek_pc\', res.data.token)\n    // 跳转到首页\n    this.props.history.push(\'/home\')\n    alert(\'登录成功\')\n  } catch (err) {\n    alert(err.response.data.message)\n  }\n}\n```\n\n### 消息提示组件的使用\n\n```jsx\n// 表单提交\nsubmit = async values => {\n    this.setState({\n        loading: true\n    })\n\n    const { mobile, code } = values\n    try {\n        const { data } = await login(mobile, code)\n        message.success(\'登录成功\', 1, () => {\n            // 存储token\n            localStorage.setItem(\'itcast_geek_pc\', data.token)\n            // 跳转到首页\n            this.props.history.push(\'/home\')\n        })\n    } catch (err) {\n        message.warning(err.response.data.message, 1, () => {\n            this.setState({\n                loading: false\n            })\n        })\n    }\n}\n```\n\n\n## react样式冲突 \n\n### 组件样式覆盖问题\n\n+ 在Layout组件的`index.scss`中添加样式\n\n```css\n.navBar {\n  background-color: pink;\n}\n```\n\n+ 在`Home`组件中的样式也跟着发生了改变，说明组件中的样式是相互影响的。\n+ 原因：在配置路由时，Layout和 Home 组件都被导入到项目中，那么组件的样式也就被导入到项目中了。如果组件之间样式名称相同，那么一个组件中的样式就会在另一个组件中也生效，从而造成组件之间样式相互覆盖的问题。\n+ 结论：默认，只要导入了组件，不管组件有没有显示在页面中，组件的样式就会生效。\n+ 解决方案\n  + 手动处理 （起不同的类名）\n  + `CSS IN JS` ： 以js的方式来处理css   \n  + css不是一门编程语言，css没有所有的局部作用域全局作用域这样的区分。。。css只有全局作用域\n\n###  CSS IN JS\n\n+ CSS IN JS：是使用 JavaScript 编写 CSS 的统称，用来解决 CSS 样式冲突、覆盖等问题\n+ [CSS IN JS](<https://github.com/MicheleBertoli/css-in-js>) 的具体实现有 50 多种，比如：CSS Modules、[styled-components](<https://www.styled-components.com/>) 等\n\n+ 推荐使用：[CSS Modules](<https://github.com/css-modules/css-modules>) （React脚手架已集成，可直接使用）\n\n### CSS Modules 的说明 \n\n+ CSS Modules 通过对 CSS 类名重命名，保证每个类名的唯一性，从而避免样式冲突的问题 \n+ 换句话说：所有类名都具有“局部作用域”，只在当前组件内部生效\n+ 在 React 脚手架中：文件名、类名、hash（随机）三部分，只需要指定类名即可  BEM\n+ `xxxx.module.css`\n\n```js\n/* 自动生成的类名，我们只需要提供 classname 即可 */\n[filename]_[classname]_[hash]\n```\n\n```css\n// 类名\n.error {}  .red{}\n// 生成的类名为：\n.NavHeader_error__ax7yz   .NavHead_red_abcdc\n```\n\n### 在项目中使用css Modules\n\n+ 创建名为 `[name].module.css` 的样式文件（React脚手架中的约定，与普通 CSS 作区分）\n\n```js\n// 在 CityList 组件中创建的样式文件名称：\nindex.module.css\n```\n\n+ 组件中导入该样式文件（注意语法）\n\n```js\n// 在 CityList 组件中导入样式文件：\nimport styles from \'./index.module.css\'\n```\n\n+ 通过 styles 对象访问对象中的样式名来设置样式\n\n```js\n<div className={styles.test}></div>\n```\n\n### css module的注意点\n\n+ 类名最好使用驼峰命名，因为最终类名会生成`styles`的一个属性\n\n```js\n.tabBar {}\n\nstyles.tabBar\n```\n\n+ 如果没有使用驼峰命名，对于不合法的命名，需要使用[]语法 \n\n```js\n.tab-bar {}\n\nstyles[\'tab-bar\']\n```\n\n+ 如果是全局的类名，应该使用`:global(.类名)`的方式，不然会把全局类名给修改掉 \n\n```js\n:global(.icon-map) {   }\n\n这样css modules就不会修改掉类名了\n```\n\n### css module配合sass\n\n+ css moudule也可以配合sass来使用，创建名为`[name].module.scss`\n\n```css\n.father {\n  .son {\n    font-size: 30px;\n  }\n\n  :global {\n    .son2 {\n      font-size: 20px;\n    }\n  }\n}\n```\n\n+ 使用css modules解决Login组件样式冲突问题\n\n\n\n### css modules的使用步骤\n\n1. 把`index.scss`改成`index.module.scss`\n\n```scss\n.list {\n  background-color: pink;\n  color: red;\n    :global {\n        xxxx\n    }\n}\n\n```\n\n2. 导入样式的时候进行修改\n\n```diff\n- import \'./index.scss\'\n\n+ import styles from \'./index.module.scss\'\n```\n\n\n\n3. 使用的时候需要修改\n\n```diff\n- <div className=\"list\">文章列表组件</div>\n\n+ <div className={styles.list}>文章列表组件</div>\n```\n\n\n\n## 项目功能 - 首页\n\n![image-20210825144229158](https://gitee.com/qarabala/jikeyuanpc-docs/raw/master/mds/images/image-20210825144229158.png)\n\n### 搭建布局组件结构\n\n+ 准备基本结构\n\n```jsx\n<div className=\"layout\">\n  <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n    </Header>\n    <Layout>\n      <Sider width={200} className=\"site-layout-background\">\n        <Menu\n          mode=\"inline\"\n          defaultSelectedKeys={[\'1\']}\n          defaultOpenKeys={[\'sub1\']}\n          style={{ height: \'100%\', borderRight: 0 }}\n        >\n          <Menu.Item key=\"1\">option1</Menu.Item>\n          <Menu.Item key=\"2\">option2</Menu.Item>\n          <Menu.Item key=\"3\">option3</Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout style={{ padding: \'0 24px 24px\' }}>\n        <Content\n          className=\"site-layout-background\"\n          style={{\n            padding: 24,\n            margin: 0,\n            minHeight: 280,\n          }}\n        >\n          Content\n        </Content>\n      </Layout>\n    </Layout>\n  </Layout>\n</div>\n```\n\n+ 提供样式文件`index.scss`\n\n```scss\n.layout {\n  .logo {\n    float: left;\n    width: 120px;\n    height: 31px;\n    margin: 16px 24px 16px 0;\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n  .ant-row-rtl .logo {\n    float: right;\n    margin: 16px 0 16px 24px;\n  }\n\n  .site-layout-background {\n    background: #fff;\n  }\n}\n\n```\n\n### 头部结构与样式\n\n+ 头部结构\n\n```jsx\n<Header className=\"header\">\n  <div className=\"logo\" />\n  <div className=\"profile\">\n    <span>黑马先锋</span>\n    <span>\n      <LogoutOutlined></LogoutOutlined>\n      {\'  \'}退出\n    </span>\n  </div>\n</Header>\n```\n\n+ 头部样式\n\n```css\n.layout {\n  .profile {\n    position: absolute;\n    right: 20px;\n    color: #fff;\n    font-weight: 700;\n    span + span {\n      margin-left: 20px;\n      cursor: pointer;\n    }\n  }\n}\n\n```\n\n### 左侧菜单\n\n+ 导入图标\n\n```jsx\nimport {\n  LogoutOutlined,\n  HomeOutlined,\n  DiffOutlined,\n  EditOutlined,\n} from \'@ant-design/icons\'\n```\n\n+ 展示图标\n\n```jsx\n<Menu.Item key=\"1\" icon={<HomeOutlined />}>\n  数据概览\n</Menu.Item>\n<Menu.Item key=\"2\" icon={<DiffOutlined />}>\n  内容管理\n</Menu.Item>\n<Menu.Item key=\"3\" icon={<EditOutlined />}>\n  发布文章\n</Menu.Item>\n```\n\n### 整体样式处理\n\n+ 样式\n\n```scss\n.layout {\n  height: 100vh;\n  .ant-layout {\n    height: 100%;\n  }\n}\n```\n\n+ 内容样式修改\n\n```jsx\n<Layout style={{ padding: \'24px\' }}>\n```\n\n### 嵌套路由的配置\n\n+ 新增组件 `Home/index.js`  `ArticleList/index.js`   `ArticlePublish/index.js`\n\n```jsx\nimport React, { Component } from \'react\'\n\nexport default class Home extends Component {\n  render() {\n    return <div className=\"home\">Home首页</div>\n  }\n}\n\n```\n\n+ 增加配置  layout/index.js组件中\n\n```jsx\n\nimport Home from \'../Home\'\nimport ArticleList from \'../ArticleList\'\nimport ArticlePublish from \'../ArticlePublish\'\n\n<Route exact path=\"/home\" component={Home}></Route>\n<Route path=\"/home/list\" component={ArticleList}></Route>\n<Route path=\"/home/publish\" component={ArticlePublish}></Route>\n```\n\n### 退出功能\n\n+ 结构\n\n```jsx\nimport { Layout, Menu, Popconfirm } from \'antd\'\n\n<Popconfirm\n  title=\"你确定要退出本系统么？\"\n  okText=\"确定\"\n  cancelText=\"取消\"\n  onConfirm={this.onConfirm}\n>\n  <span>\n    <LogoutOutlined></LogoutOutlined>\n    {\'  \'}退出\n  </span>\n</Popconfirm>\n```\n\n+ 功能\n\n```jsx\nonConfirm = () => {\n  // 点击了确定\n  localStorage.removeItem(\'itcast_geek_pc\')\n  // 跳转到登录页\n  this.props.history.push(\'/login\')\n  // 提示消息\n  message.success(\'退出成功\')\n}\n```\n\n### 本地存储操作的封装\n\n+ 封装token操作 `utils/storage.js`\n\n```jsx\nconst TOKEN_KEY = \'itcast-geek-token\'\n\nconst setToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token)\n}\n\nconst removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY)\n}\n\nconst getToken = () => {\n  return localStorage.getItem(TOKEN_KEY)\n}\n\nexport { setToken, getToken, removeToken }\n\n```\n\n+ 修改登录代码\n\n```jsx\nsubmit = async (values) => {\n  const { mobile, code } = values\n  try {\n    const res = await login(mobile, code)\n    // 存储token\n    // localStorage.setItem(\'itcast_geek_pc\', res.data.token)\n    setToken(res.data.token)\n    // 跳转到首页\n    this.props.history.push(\'/home\')\n    message.success(\'登录成功\', 1)\n  } catch (err) {\n    message.warning(err.response.data.message, 1)\n  }\n}\n```\n\n+ 修改退出功能\n\n```jsx\nonConfirm = () => {\n  // 点击了确定\n  // localStorage.removeItem(\'itcast_geek_pc\')\n  removeToken()\n  // 跳转到登录页\n  this.props.history.push(\'/login\')\n  // 提示消息\n  message.success(\'退出成功\')\n}\n```\n\n### 登录访问控制 - 鉴权\n\n对于极客园 PC 端项目来说，\n\n- 有的页面*不需要登录*就可以访问，比如，登录页\n- 有的页面*需要登录*后才能访问，比如，项目后台首页、内容管理等（除了登录页面，其他页面需要登录才能访问）\n\n因此，就需要对项目进行登录访问控制，让需要登录才能访问的页面，必须在登录后才能访问。\n在没有登录时，直接跳转到登录页面，让用户进行登录。\n\n- 如何实现登录访问控制呢？\n  - 分析：不管哪个页面都是通过**路由**来访问的，因此，需要从路由角度来进行控制\n  - 思路：创建 `AuthRoute` 组件，判断是否登录，1 登录直接显示要访问的页面 2 没有登录跳转到登录页面\n\n**难点：react中没有导航守卫，需要自己封装**\n\n#### 分析 AuthRoute 鉴权路由组件\n\n+ 场景：限制某个页面只能在登录的情况下访问。\n+ 说明：在 React 路由中并没有直接提供该组件，需要手动封装，来实现登录访问控制（类似于 Vue 路由的导航守卫）。\n+ 如何封装？参考 react-router-dom 文档中提供的鉴权示例 。\n+ 如何使用？使用 AuthRoute 组件代替默认的 Route 组件，来配置路由规则。\n+ AuthRoute 组件实际上就是对原来的 Route 组件做了一次包装，来实现了一些额外的功能。\n+ `<Route  path component render>`   render 方法，指定该路由要渲染的组件内容（类似于 component 属性）。\n+ Redirect 组件：重定向组件，通过 to 属性，指定要跳转到的路由信息。\n+ state 属性：表示给路由附加一些额外信息，此处，用于指定登录成功后要进入的页面地址。\n\n```js\n// 使用方式：\n<AuthRoute path=\"/rent/add\" component={Rent} />\n```\n\n#### 实现自己的AuthRoute组件\n\n+ 新增hasToken方法\n\n```jsx\nconst hasToken = () => !!getToken()\n\nexport { setToken, getToken, removeToken, hasToken }\n```\n\n+ 权限判断\n\n```js\nimport React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { hasToken } from \'utils/storage\'\nfunction AuthRouter({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        // console.log(\"props\", props)\n        if (hasToken()) {\n          return <Component {...props}></Component>\n        } else {\n          return (\n            <Redirect\n              to={{ pathname: \"/login\", state: { from: props.location } }}\n            ></Redirect>\n          )\n        }\n      }}\n    ></Route>\n  )\n}\n\nexport default AuthRouter\n\n```\n\n+ 使用AuthRoute\n\n```jsx\n{/* 路由规则 */}\n<Switch>\n  <Redirect exact from=\"/\" to=\"/home\"></Redirect>\n  <AuthRoute path=\"/home\" component={Layout}></AuthRoute>\n  <Route path=\"/login\" component={Login}></Route>\n</Switch>\n```\n\n+ 登录成功处理\n\n```jsx\nsubmit = async (values) => {\n  const { mobile, code } = values\n  console.log(this.props)\n  try {\n    const res = await login(mobile, code)\n    // 存储token\n    // localStorage.setItem(\'itcast_geek_pc\', res.data.token)\n    setToken(res.data.token)\n    // 跳转到首页\n    const { state } = this.props.location\n    if (state) {\n      this.props.history.push(state.from.pathname)\n    } else {\n      this.props.history.push(\'/home\')\n    }\n    message.success(\'登录成功\', 1)\n  } catch (err) {\n    message.warning(err.response.data.message, 1)\n  }\n}\n```\n\n#### route组件的作用\n\n```jsx\n<Route path=\"/home\" component={Home}></Route>\n<Route path=\"/login\" component={Login}></Route>\n```\n\nRoute组件会根据当前地址中的地址 和 Route的path进行匹配，，，如果路径一直，那么这个对应的组件就会被渲染出来\n\nRoute没有判断用户是否登录的能力，只会根据path判断是否要渲染对应的组件。\n\n**需求：让Route组件能够有逻辑，能够判断用户是否登录，，，，需要通过Route组件的render属性**\n\n\n\n### 获取个人信息\n\n+ 拦截器添加token\n\n```jsx\n// 请求拦截器\ninstance.interceptors.request.use(\n  function (config) {\n    const token = getToken()\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  function (error) {\n    return Promise.reject(error)\n  }\n)\n```\n\n+ 封装接口，获取用户信息\n\n```jsx\n/**\n * 获取用户信息\n * @returns Promise\n */\nexport const getUserInfo = () => {\n  return request({\n    url: \'/user/profile\',\n    method: \'get\',\n  })\n}\n\n```\n\n+ 发送请求进行登录\n\n```jsx\nstate = {\n  profile: {},\n}\n\nasync componentDidMount() {\n  const res = await getUserProfile()\n  console.log(res)\n  this.setState({\n    profile: res.data,\n  })\n}\n```\n\n+ 渲染\n\n```jsx\n<div className=\"profile\">\n  <span>{this.state.profile.name}</span>\n  <Popconfirm\n    title=\"你确定要退出本系统么？\"\n    okText=\"确定\"\n    cancelText=\"取消\"\n    onConfirm={this.onConfirm}\n  >\n    <span>\n      <LogoutOutlined></LogoutOutlined>\n      {\'  \'}退出\n    </span>\n  </Popconfirm>\n</div>\n```\n\n### 处理token过期\n\n> 使用响应拦截器拦截未登录的用户\n>\n> 难点：react-router-dom 如何在非组件中实现路由跳转\n\n+ 响应拦截器处理\n\n```jsx\n// 响应拦截器\ninstance.interceptors.response.use(\n  function (response) {\n    return response.data\n  },\n  function (error) {\n    console.log(error.response)\n    if (error.response.status === 401) {\n      // token过期\n      removeToken()\n      window.location.href = \'/login\'\n    }\n    return Promise.reject(error)\n  }\n)\n```\n\n缺点：window.localtion会导致页面刷新\n\n+ history处理 `utils/history.js`\n\n```\nimport { createHashHistory } from \'history\'\n\nconst history = createHashHistory()\n\nexport default history\n\n```\n\n+ App.js修改\n\n```jsx\nimport history from \'utils/history\'\n\n<Router history={history}>\n</Router>\n```\n\n\n\n+ 修改响应拦截器\n\n```jsx\nimport history from \'./history\'\n// 响应拦截器\ninstance.interceptors.response.use(\n  function (response) {\n    return response.data\n  },\n  function (error) {\n    console.log(error.response)\n    if (error.response.status === 401) {\n      // token过期\n      removeToken()\n      // 跳转到登录页\n      history.push(\'/login\')\n      message.warning(\'用户信息已过期\')\n    }\n    return Promise.reject(error)\n  }\n)\n```\n\n### 左侧菜单与高亮\n\n```jsx\n<Menu\n  theme=\"dark\"\n  mode=\"inline\"\n  defaultSelectedKeys={[this.props.location.pathname]}\n  style={{ height: \'100%\', borderRight: 0 }}\n>\n  <Menu.Item key=\"/home\" icon={<HomeOutlined />}>\n    <Link to=\"/home\">首页</Link>\n  </Menu.Item>\n  <Menu.Item key=\"/home/list\" icon={<DiffOutlined />}>\n    <Link to=\"/home/list\">内容管理</Link>\n  </Menu.Item>\n  <Menu.Item key=\"/home/publish\" icon={<EditOutlined />}>\n    <Link to=\"/home/publish\">发布文章</Link>\n  </Menu.Item>\n</Menu>\n```\n\n\n## 文章列表功能\n\n\n### card组件与面包屑导航\n\n+ card组件，文档：https://ant.design/components/card-cn/\n\n```jsx\nimport { Card } from \'antd\'\nexport default class ArticleList extends Component {\n  render() {\n    return (\n      <div className=\"articleList\">\n        <Card title=\"面包屑导航\">我是内容</Card>\n      </div>\n    )\n  }\n}\n```\n\n+ 面包屑导航的使用\n\n```jsx\nimport React, { Component } from \'react\'\nimport { Card, Breadcrumb } from \'antd\'\nimport { Link } from \'react-router-dom\'\n\nrender() {\n    return (\n      <div className=\"articleList\">\n        <Card\n          title={\n            <Breadcrumb separator=\"/\">\n              <Breadcrumb.Item>\n                <Link to=\"/home\">首页</Link>\n              </Breadcrumb.Item>\n              <Breadcrumb.Item>文章列表</Breadcrumb.Item>\n            </Breadcrumb>\n          }\n        >\n          我是内容\n        </Card>\n      </div>\n    )\n  }\n```\n\n### 搜索表单基本结构\n\n+ 复制表单的基本结构到组件中\n+ 修改表单结构\n\n```jsx\n<Card\n  title={\n    <Breadcrumb separator=\"/\">\n      <Breadcrumb.Item>\n        <Link to=\"/home\">首页</Link>\n      </Breadcrumb.Item>\n      <Breadcrumb.Item>文章列表</Breadcrumb.Item>\n    </Breadcrumb>\n  }\n>\n  <Form>\n    <Form.Item label=\"状态\" name=\"username\">\n      <Input />\n    </Form.Item>\n\n    <Form.Item label=\"频道\" name=\"password\">\n      <Input.Password />\n    </Form.Item>\n\n    <Form.Item label=\"日期\" name=\"password\">\n      <Input.Password />\n    </Form.Item>\n\n    <Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\">\n        筛选\n      </Button>\n    </Form.Item>\n  </Form>\n</Card>\n```\n\n+ 状态的基本结构\n\n```jsx\n<Form initialValues={{ status: null }}>\n  <Form.Item label=\"状态\" name=\"status\">\n    <Radio.Group>\n      <Radio value={null}>全部</Radio>\n      <Radio value={0}>草稿</Radio>\n      <Radio value={1}>待审核</Radio>\n      <Radio value={2}>审核通过</Radio>\n      <Radio value={3}>审核失败</Radio>\n    </Radio.Group>\n  </Form.Item>\n```\n\n+ 下拉框结构\n\n```jsx\n<Form.Item label=\"频道\" name=\"password\">\n  <Select placeholder=\"请选择频道\" style={{ width: 200 }}>\n    <Option value=\"jack\">Jack</Option>\n    <Option value=\"lucy\">Lucy</Option>\n    <Option value=\"Yiminghe\">yiminghe</Option>\n  </Select>\n</Form.Item>\n```\n\n+ 日期选择基本结构\n\n```jsx\nimport { Card, Breadcrumb, Form, Button, Radio, Select, DatePicker } from \'antd\'\nconst { RangePicker } = DatePicker\n\n<Form.Item label=\"日期\" name=\"password\">\n  <RangePicker />\n</Form.Item>\n```\n\n### 日期中文处理\n\n> https://ant-design.gitee.io/components/date-picker-cn/\n\n在index.js中\n\n```jsx\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\n// 在 index.js 中导入 antd 的样式文件\nimport \'antd/dist/antd.css\'\n\nimport \'./index.css\'\nimport { ConfigProvider } from \'antd\'\nimport \'moment/locale/zh-cn\'\nimport locale from \'antd/lib/locale/zh_CN\'\n\nimport App from \'./App\'\n\nReactDOM.render(\n  <ConfigProvider locale={locale}>\n    <App />\n  </ConfigProvider>,\n  document.getElementById(\'root\')\n)\n\n```\n\n### 频道数据管理\n\n+ 封装接口\n\n```jsx\nimport request from \'utils/request\'\n\n/*\n  获取所有的频道\n*/\nexport const getChannels = () => {\n  return request.get(\'/channels\')\n}\n\n```\n\n+ 发送请求获取数据\n\n```jsx\nimport { getChannels } from \'api/channel\'\n\nstate = {\n  channels: [],\n}\nasync getChannelList() {\n  const res = await getChannels()\n  this.setState({\n    channels: res.data.channels,\n  })\n}\n\ncomponentDidMount() {\n  this.getChannelList()\n}\n```\n\n+ 渲染频道数据\n\n```jsx\n<Select placeholder=\"请选择频道\" style={{ width: 200 }}>\n  {this.state.channels.map((item) => (\n    <Option value={item.id} key={item.id}>\n      {item.name}\n    </Option>\n  ))}\n</Select>\n```\n\n### 表格基本结构\n\n+ 基本结构\n\n```jsx\nimport {\n  Card,\n  Breadcrumb,\n  Form,\n  Button,\n  Radio,\n  Select,\n  DatePicker,\n  Table,\n  Tag,\n  Space,\n} from \'antd\'\n\nrender() {\n  const columns = [\n    {\n      title: \'Name\',\n      dataIndex: \'name\',\n      key: \'name\',\n      render: (text) => <a>{text}</a>,\n    },\n    {\n      title: \'Age\',\n      dataIndex: \'age\',\n      key: \'age\',\n    },\n    {\n      title: \'Address\',\n      dataIndex: \'address\',\n      key: \'address\',\n    },\n    {\n      title: \'Tags\',\n      key: \'tags\',\n      dataIndex: \'tags\',\n      render: (tags) => (\n        <>\n          {tags.map((tag) => {\n            let color = tag.length > 5 ? \'geekblue\' : \'green\'\n            if (tag === \'loser\') {\n              color = \'volcano\'\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            )\n          })}\n        </>\n      ),\n    },\n    {\n      title: \'Action\',\n      key: \'action\',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <a>Invite {record.name}</a>\n          <a>Delete</a>\n        </Space>\n      ),\n    },\n  ]\n\n  const data = [\n    {\n      key: \'1\',\n      name: \'John Brown\',\n      age: 32,\n      address: \'New York No. 1 Lake Park\',\n      tags: [\'nice\', \'developer\'],\n    },\n    {\n      key: \'2\',\n      name: \'Jim Green\',\n      age: 42,\n      address: \'London No. 1 Lake Park\',\n      tags: [\'loser\'],\n    },\n    {\n      key: \'3\',\n      name: \'Joe Black\',\n      age: 32,\n      address: \'Sidney No. 1 Lake Park\',\n      tags: [\'cool\', \'teacher\'],\n    },\n  ]\n\n  return (\n    <div className=\"articleList\">\n      <Card title={`根据筛选条件共查询到${0}条数据`}>\n        <Table dataSource={data} columns={columns} />\n      </Card>\n    </div>\n  )\n}\n```\n\n### 获取文章列表数据\n\n+ 封装接口\n\n```jsx\nimport request from \'utils/request\'\n\n/**\n * 获取文章列表\n * @param {*} params\n * @returns\n */\nexport const getArticles = (params) => {\n  return request({\n    url: \'/mp/articles\',\n    method: \'get\',\n    params,\n  })\n}\n\n```\n\n+ 发送请求获取文章列表数据\n\n```jsx\n  state = {\n    channels: [],\n    articles: [],\n    total: 0,\n  }\n  async getChannelList() {\n    const res = await getChannels()\n    this.setState({\n      channels: res.data.channels,\n    })\n  }\n\n  async getArticleList() {\n    const res = await getArticles()\n    this.setState({\n      articles: res.data.results,\n      total: res.data.total_count,\n    })\n  }\n\n  componentDidMount() {\n    this.getChannelList()\n    this.getArticleList()\n  }\n\n```\n\n### 渲染表格数据\n\n+ 修改columns\n\n```jsx\nconst columns = [\n  {\n    title: \'封面\',\n    dataIndex: \'name\',\n  },\n  {\n    title: \'标题\',\n    dataIndex: \'title\',\n  },\n  {\n    title: \'状态\',\n    dataIndex: \'status\',\n  },\n  {\n    title: \'发布时间\',\n    dataIndex: \'pubdate\',\n  },\n  {\n    title: \'阅读数\',\n    dataIndex: \'read_count\',\n  },\n  {\n    title: \'评论数\',\n    dataIndex: \'comment_count\',\n  },\n  {\n    title: \'点赞数\',\n    dataIndex: \'like_count\',\n  },\n  {\n    title: \'操作\',\n  },\n]\n```\n\n+ 封面处理\n\n```jsx\n{\n  title: \'封面\',\n  dataIndex: \'cover\',\n  render(data) {\n    const { images, type } = data\n    if (type === 0) {\n      return (\n        <Image width={200} preview={false} height={150} src={defaultImg} />\n      )\n    }\n    return (\n      <Image width={200} height={150} src={images[0]} fallback={defaultImg} />\n    )\n  },\n},\n```\n\n+ 状态处理\n\n```jsx\n// 通过对象来优化if/switch\n// 使用方式：articleStatus[0] => { text: \'草稿\', color: \'\' }\nconst articleStatus = {\n  0: { text: \'草稿\', color: \'gold\' },\n  1: { text: \'待审核\', color: \'lime\' },\n  2: { text: \'审核通过\', color: \'green\' },\n  3: { text: \'审核失败\', color: \'red\' },\n}\n\n{\n  title: \'状态\',\n  dataIndex: \'status\',\n  render: (data) => {\n    const tagObj = articleStatus[data]\n    return <Tag color={tagObj.color}>{tagObj.text}</Tag>\n  },\n},\n```\n\n+ 操作功能\n\n```jsx\n{\n    title: \'操作\',\n    render() {\n      return (\n        <Space>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<EditOutlined />}\n          ></Button>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            danger\n            icon={<DeleteOutlined />}\n          ></Button>\n        </Space>\n      )\n    },\n},\n```\n\n### key属性处理\n\n```jsx\n<Card title={`根据筛选条件共查询到${this.state.total}条数据`}>\n  <Table\n    rowKey=\"id\"\n    dataSource={this.state.articles}\n    columns={columns}\n  />\n</Card>\n```\n\n### 分页功能\n\n+ 使用分页组件\n\n```jsx\n<Card title={`根据筛选条件共查询到${this.state.total_count}条数据`}>\n  <Table\n    rowKey=\"id\"\n    dataSource={results}\n    columns={columns}\n    pagination={{\n      position: [\'bottomCenter\'],\n      current: page,\n      pageSize: per_page,\n      total: total_count,\n      // 每页大小 或者 页码 改变时，触发的事件\n      onChange: this.changePage,\n    }}\n  />\n</Card>\n```\n\n+ 提供changePage事件\n\n```jsx\nchangePage = async (page, pageSize) => {\n  console.log(page)\n  const res = await getArticles({\n    page,\n    per_page: this.state.articles.per_page,\n  })\n  this.setState({\n    articles: res.data,\n  })\n}\n```\n\n### 获取表单的值进行筛选\n\n+ 给表单注册事件\n\n```jsx\n<Form initialValues={{ status: -1 }} onFinish={this.onFinish}>\n```\n\n+ 给表单元素提供name属性\n\n```jsx\n<Form.Item label=\"状态\" name=\"status\">\n  <Radio.Group>\n    <Radio value={-1}>全部</Radio>\n    <Radio value={0}>草稿</Radio>\n    <Radio value={1}>待审核</Radio>\n    <Radio value={2}>审核通过</Radio>\n    <Radio value={3}>审核失败</Radio>\n  </Radio.Group>\n</Form.Item>\n\n<Form.Item label=\"频道\" name=\"channel_id\">\n  <Select placeholder=\"请选择频道\" style={{ width: 200 }}>\n    {this.state.channels.map((item) => (\n      <Option value={item.id} key={item.id}>\n        {item.name}\n      </Option>\n    ))}\n  </Select>\n</Form.Item>\n\n<Form.Item label=\"日期\" name=\"date\">\n  <RangePicker />\n</Form.Item>\n```\n\n+ 发送请求，获取数据\n\n```jsx\nonFinish = async (values) => {\n  console.log(values)\n  // 发送请求，获取数据\n  const params = {}\n  // 处理状态\n  if (values.status !== -1) {\n    params.status = values.status\n  }\n  // 处理频道\n  if (values.channel_id) {\n    params.channel_id = values.channel_id\n  }\n  // 处理日期\n  if (values.date) {\n    params.begin_pubdate = values.date[0].format(\'YYYY-MM-DD\')\n    params.end_pubdate = values.date[1].format(\'YYYY-MM-DD\')\n  }\n  params.page = 1\n  const res = await getArticles(params)\n  console.log(res.data)\n  this.setState({\n    articles: res.data,\n  })\n}\n```\n\n### 时间的优化\n\n```jsx\n// 处理日期\nif (values.date) {\n  params.begin_pubdate = values.date[0]\n    .startOf(\'day\')\n    .format(\'YYYY-MM-DD HH:mm:ss\')\n  params.end_pubdate = values.date[1]\n    .endOf(\'day\')\n    .format(\'YYYY-MM-DD HH:mm:ss\')\n}\n```\n\n### 修改分页bug\n\n```jsx\nchangePage = async (page, pageSize) => {\n  const res = await getArticles({\n    ...this.params,\n    page,\n    per_page: this.state.articles.per_page,\n  })\n  this.setState({\n    articles: res.data,\n  })\n}\nonFinish = async (values) => {\n  console.log(values)\n  // 发送请求，获取数据\n  const params = {}\n  // 处理状态\n  if (values.status !== -1) {\n    params.status = values.status\n  }\n  // 处理频道\n  if (values.channel_id) {\n    params.channel_id = values.channel_id\n  }\n  // 处理日期\n  if (values.date) {\n    params.begin_pubdate = values.date[0]\n      .startOf(\'day\')\n      .format(\'YYYY-MM-DD HH:mm:ss\')\n    params.end_pubdate = values.date[1]\n      .endOf(\'day\')\n      .format(\'YYYY-MM-DD HH:mm:ss\')\n  }\n  params.page = 1\n  this.params = params\n  const res = await getArticles(params)\n  console.log(res.data)\n  this.setState({\n    articles: res.data,\n  })\n}\n```\n\n### 删除功能\n\n+ 注册点击事件\n\n```jsx\n<Button\n  type=\"primary\"\n  shape=\"circle\"\n  danger\n  icon={<DeleteOutlined />}\n  onClick={() => this.handleDelete(data.id)}\n></Button>\n```\n\n+ 准备弹窗\n\n```jsx\nhandleDelete = (id) => {\n  confirm({\n    title: \'温馨提示？\',\n    icon: <ExclamationCircleOutlined />,\n    content: \'你确定要删除文章吗\',\n    onOk() {\n      // 发送请求进行删除\n    },\n  })\n}\n```\n\n+ 封装接口进行删除\n\n```jsx\n/**\n * 删除文章\n * @param {*} id\n * @returns\n */\nexport const delArticle = (id) => {\n  return request({\n    url: `/mp/articles/${id}`,\n    method: \'delete\',\n  })\n}\n\n```\n\n+ 删除功能完成\n\n```js\nhandleDelete = (id) => {\n  confirm({\n    title: \'温馨提示？\',\n    icon: <ExclamationCircleOutlined />,\n    content: \'你确定要删除文章吗\',\n    onOk: async () => {\n      // 发送请求进行删除\n      await delArticle(id)\n      this.getArticleList(this.params)\n    },\n  })\n}\n```\n\n## 发布文章\n\n### 基本结构准备\n\n+ 面包屑\n\n```jsx\nimport React, { Component } from \'react\'\nimport { Card, Breadcrumb } from \'antd\'\nimport { Link } from \'react-router-dom\'\nexport default class ArticleList extends Component {\n  render() {\n    return (\n      <div className=\"ArticleList\">\n        <Card\n          title={\n            <Breadcrumb separator=\">\">\n              <Breadcrumb.Item>\n                <Link to=\"/home\">首页</Link>\n              </Breadcrumb.Item>\n              <Breadcrumb.Item>发布文章</Breadcrumb.Item>\n            </Breadcrumb>\n          }\n        ></Card>\n      </div>\n    )\n  }\n}\n```\n\n+ 表单\n\n```jsx\nimport { Card, Breadcrumb, Form, Input, Radio, Space, Button } from \'antd\'\n\n<Form labelCol={{ span: 4 }} initialValues={{ type: 0 }}>\n  <Form.Item label=\"标题\" name=\"title\">\n    <Input placeholder=\"请输入文章标题\" style={{ width: 400 }} />\n  </Form.Item>\n  <Form.Item label=\"频道\" name=\"channel_id\">\n    频道组件\n  </Form.Item>\n  <Form.Item label=\"封面\">\n    <Form.Item name=\"type\">\n      <Radio.Group onChange={this.changeImageType}>\n        <Radio value={0}>无图</Radio>\n        <Radio value={1}>单图</Radio>\n        <Radio value={3}>三图</Radio>\n        {/* <Radio value={-1}>自动</Radio> */}\n      </Radio.Group>\n    </Form.Item>\n    图片上传组件\n  </Form.Item>\n  <Form.Item label=\"内容\" name=\"content\">\n    文章内容\n  </Form.Item>\n  <Form.Item wrapperCol={{ offset: 4 }}>\n    <Space>\n      <Button size=\"large\" type=\"primary\" htmlType=\"submit\">\n        发布文章\n      </Button>\n      <Button size=\"large\">存入草稿</Button>\n    </Space>\n  </Form.Item>\n</Form>\n```\n\n+ 给表单注册事件\n\n```jsx\n<Form\n  labelCol={{ span: 4 }}\n  initialValues={{ type: 0 }}\n  onFinish={this.onFinish}\n>\n\n\nonFinish = (values) => {\n  console.log(values)\n}\n```\n\n### 频道组件封装\n\n+ 基础封装\n\n```jsx\nimport { Component } from \'react\'\nimport { Select } from \'antd\'\nimport { getChannels } from \'api/channel\'\n\nconst { Option } = Select\n\nclass Channel extends Component {\n  state = {\n    channels: [],\n  }\n\n  componentDidMount() {\n    this.getChannles()\n  }\n\n  // 获取频道列表数据的方法\n  async getChannles() {\n    const res = await getChannels()\n    this.setState({\n      channels: res.data.channels,\n    })\n  }\n\n  render() {\n    const { channels } = this.state\n\n    return (\n      <Select placeholder=\"请选择文章频道\">\n        {channels.map((item) => (\n          <Option key={item.id} value={item.id}>\n            {item.name}\n          </Option>\n        ))}\n      </Select>\n    )\n  }\n}\n\nexport default Channel\n\n```\n\n+ 使用频道组件\n\n```jsx\nimport Channel from \'components/Channel\'\n\n<Form.Item label=\"频道\" name=\"channel_id\">\n  <Channel></Channel>\n</Form.Item>\n```\n\n+ 让频道组件受控\n\n> 参考文档：https://ant-design.gitee.io/components/form-cn/#components-form-demo-customized-form-controls\n\n```jsx\nrender() {\n  const { channels } = this.state\n  const { value, onChange } = this.props\n  return (\n    <Select\n      placeholder=\"请选择文章频道\"\n      style={{ width: 200 }}\n      value={value}\n      onChange={onChange}\n    >\n      {channels.map((item) => (\n        <Option key={item.id} value={item.id}>\n          {item.name}\n        </Option>\n      ))}\n    </Select>\n  )\n}\n```\n\n### 文章内容处理\n\n+ 使用react-quill富文本编辑器 	https://github.com/zenoamaro/react-quill\n\n```jsx\nimport ReactQuill from \'react-quill\';\nimport \'react-quill/dist/quill.snow.css\';\n\n<Form.Item label=\"内容\" name=\"content\">\n  <ReactQuill\n    theme=\"snow\"\n    placeholder=\"请输入文章内容...\"\n  ></ReactQuill>\n</Form.Item>\n```\n\n+ 注意：**必须提供默认值，不然会报错**\n+ 提供样式\n\n```scss\n.publish {\n  :global {\n    .ql-editor {\n      min-height: 300px;\n    }\n  }\n}\n\n```\n\n### 图片上传组件\n\n+ 基本结构\n\n```jsx\nimport {\n  Card,\n  Breadcrumb,\n  Form,\n  Input,\n  Radio,\n  Space,\n  Button,\n  Upload,\n} from \'antd\'\nimport { PlusOutlined } from \'@ant-design/icons\'\n\n<Upload listType=\"picture-card\">\n  <PlusOutlined></PlusOutlined>\n</Upload>\n```\n\n+ 设置图片默认显示\n\n```jsx\n<Upload\n  listType=\"picture-card\"\n  name=\"image\"\n  fileList={this.state.fileList}\n>\n  <PlusOutlined></PlusOutlined>\n</Upload>\n\n\nstate = {\n  // 存放上传的文件列表\n  fileList: [\n    {\n      url: \'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\',\n    },\n    {\n      url: \'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\',\n    },\n  ],\n}\n\n```\n\n+ 图片上传功能， 需要提供name和action参数\n\n```jsx\n<Upload\n  listType=\"picture-card\"\n  name=\"image\"\n  action={`${baseURL}upload`}\n  onChange={this.uploadImages}\n  fileList={this.state.fileList}\n>\n  <PlusOutlined></PlusOutlined>\n</Upload>\n```\n\n+ 获取上传成功的图片地址\n\n```jsx\nuploadImages = ({ file, fileList }) => {\n  this.setState({\n    fileList,\n  })\n}\n```\n\n### 控制图片的上传数量\n\n+ 控制type的切换\n\n```jsx\nstate = {\n  // 存放上传的文件列表\n  fileList: [],\n  type: 0,\n}\n\n<Radio.Group onChange={this.changeImageType}>\n  <Radio value={0}>无图</Radio>\n  <Radio value={1}>单图</Radio>\n  <Radio value={3}>三图</Radio>\n</Radio.Group>\n\n\nchangeImageType = (e) => {\n  this.setState({\n    type: e.target.value,\n  })\n}\n```\n\n+ 根据type控制图片的显示\n\n```jsx\n{this.state.type !== 0 && (\n  <Upload\n    listType=\"picture-card\"\n    name=\"image\"\n    action={`${baseURL}upload`}\n    onChange={this.uploadImages}\n    fileList={this.state.fileList}\n  >\n    <PlusOutlined></PlusOutlined>\n  </Upload>\n)}\n```\n\n+ 控制图片的上传数据\n\n```jsx\n{this.state.type !== 0 && (\n  <Upload\n    listType=\"picture-card\"\n    name=\"image\"\n    action={`${baseURL}upload`}\n    onChange={this.uploadImages}\n    fileList={this.state.fileList}\n  >\n    {this.state.fileList.length < this.state.type && (\n      <PlusOutlined></PlusOutlined>\n    )}\n  </Upload>\n)}\n```\n\n### 图片预览功能\n\n### 图片格式校验\n\n### 表单校验功能\n\n+ 表单基本校验\n\n```jsx\n<Form.Item\n  label=\"标题\"\n  name=\"title\"\n  rules={[{ required: true, message: \'请输入文章标题\' }]}\n>\n  <Input placeholder=\"请输入文章标题\" style={{ width: 400 }} />\n</Form.Item>\n<Form.Item\n  label=\"频道\"\n  name=\"channel_id\"\n  rules={[{ required: true, message: \'请选择文章频道\' }]}\n>\n  <Channel></Channel>\n</Form.Item>\n<Form.Item label=\"封面\">\n  <Form.Item name=\"type\">\n    <Radio.Group onChange={this.changeImageType}>\n      <Radio value={1}>单图</Radio>\n      <Radio value={3}>三图</Radio>\n      <Radio value={0}>无图</Radio>\n      {/* <Radio value={-1}>自动</Radio> */}\n    </Radio.Group>\n  </Form.Item>\n  <div className=\"upload-list\">\n    {this.state.type !== 0 && (\n      <Upload\n        listType=\"picture-card\"\n        name=\"image\"\n        action={`${baseURL}upload`}\n        onChange={this.uploadImages}\n        fileList={this.state.fileList}\n      >\n        {this.state.fileList.length < this.state.type && (\n          <PlusOutlined></PlusOutlined>\n        )}\n      </Upload>\n    )}\n  </div>\n</Form.Item>\n<Form.Item\n  label=\"内容\"\n  name=\"content\"\n  rules={[{ required: true, message: \'请输入文章内容\' }]}\n>\n  <ReactQuill\n    theme=\"snow\"\n    placeholder=\"请输入文章内容...\"\n  ></ReactQuill>\n</Form.Item>\n```\n\n+ 图片长度的校验\n\n```jsx\nonFinish = async (values) => {\n  // 图片校验\n  if (this.state.type !== this.state.fileList.length) {\n    return message.warn(\'上传的图片数量不对\')\n  }\n}\n```\n\n### 发送请求-添加文章\n\n+ 封装接口\n\n```jsx\n/**\n * 发送请求添加文章\n * @param {*} data\n * @returns\n */\nexport const addArticle = (data) => {\n  return request({\n    url: \'/mp/articles\',\n    method: \'post\',\n    data,\n  })\n}\n\n```\n\n+ 发送请求-处理数据并且添加文章\n\n```jsx\nonFinish = async (values) => {\n  console.log(values)\n  // 处理数据，添加文章\n  const images = this.state.fileList.map((item) => {\n    if (item.url) {\n      return item.url\n    }\n    return item.response.data.url\n  })\n  const res = await addArticle({\n    ...values,\n    cover: {\n      type: values.type,\n      images,\n    },\n  })\n  message.success(\'添加文章成功\')\n  this.props.history.push(\'/home/list\')\n}\n```\n\n### 存入草稿功能\n\n+ 修改接口\n\n```jsx\n/**\n * 发送请求添加文章\n * @param {*} data\n * @returns\n */\nexport const addArticle = (data, draft = false) => {\n  return request({\n    url: \'/mp/articles?draft=\' + draft,\n    method: \'post\',\n    data,\n  })\n}\n```\n\n+ 注册点击事件\n\n```jsx\n<Button size=\"large\" onClick={this.addDraft}>\n  存入草稿\n</Button>\n```\n\n+ 提供事件\n\n```jsx\n  onFinish = async (values) => {\n    this.save(values, false)\n  }\n  save = async (values, draft) => {\n    // 图片校验\n    if (this.state.type !== this.state.fileList.length) {\n      return message.warn(\'上传的图片数量不对\')\n    }\n    // 处理数据，添加文章\n    const images = this.state.fileList.map((item) => {\n      if (item.url) {\n        return item.url\n      }\n      return item.response.data.url\n    })\n    await addArticle(\n      {\n        ...values,\n        cover: {\n          type: values.type,\n          images,\n        },\n      },\n      draft\n    )\n    message.success(\'添加文章成功\')\n    this.props.history.push(\'/home/list\')\n  }\n  addDraft = async () => {\n    // 获取表单的数据\n    const values = await this.formRef.current.validateFields()\n    this.save(values, true)\n  }\n```\n\n## 修改功能\n\n### 文字处理\n\n+ 提供状态\n\n```jsx\nstate = {\n  // 存放上传的文件列表\n  fileList: [],\n  type: 1,\n  isEdit: !!this.props.match.params.id,\n}\n```\n\n+ 控制渲染\n\n```jsx\n{this.state.isEdit ? \'修改文章\' : \'发布文章\'}\n```\n\n### 数据回显\n\n+ 路由跳转\n\n```jsx\n<Route\n  path=\"/home/publish\"\n  key=\"add\"\n  component={ArticlePublish}\n  exact\n></Route>\n<Route\n  key=\"edit\"\n  path=\"/home/publish/:id\"\n  component={ArticlePublish}\n></Route>\n```\n\n+ 注册点击事件\n\n```jsx\n<Button\n  type=\"primary\"\n  shape=\"circle\"\n  icon={<EditOutlined />}\n  onClick={() =>\n    this.props.history.push(`/home/publish/${data.id}`)\n  }\n></Button>\n```\n\n+ 封装接口，获取文章数据\n\n```jsx\n/**\n * 根据id获取文章详情\n * @param {*} id\n * @returns\n */\nexport const getArticle = (id) => {\n  return request({\n    url: `/mp/articles/${id}`,\n    method: \'get\',\n  })\n}\n```\n\n+ 数据回显\n\n```jsx\nasync componentDidMount() {\n  // 如果有id，发送请求获取详情\n  const id = this.props.match.params.id\n  if (id) {\n    const res = await getArticle(id)\n    console.log(res)\n    const type = res.data.cover.type\n    const images = res.data.cover.images.map((url) => ({ url }))\n    const values = {\n      ...res.data,\n      type,\n    }\n    this.formRef.current.setFieldsValue(values)\n    this.setState({\n      type,\n      fileList: images,\n    })\n  }\n}\n```\n\n### 修改功能完成\n\n+ 封装接口\n\n```jsx\n/**\n * 发送请求修改文章\n * @param {*} data\n * @returns\n */\nexport const editArticle = (data, draft = false) => {\n  return request({\n    url: `/mp/articles/${data.id}?draft=${draft}`,\n    method: \'put\',\n    data,\n  })\n}\n```\n\n+ 判断\n\n```jsx\nsave = async (values, draft) => {\n  // 图片校验\n  if (this.state.type !== this.state.fileList.length) {\n    return message.warn(\'上传的图片数量不对\')\n  }\n  // 处理数据，添加文章\n  const images = this.state.fileList.map((item) => {\n    if (item.url) {\n      return item.url\n    }\n    return item.response.data.url\n  })\n  if (this.state.isEdit) {\n    await editArticle(\n      {\n        ...values,\n        cover: {\n          type: values.type,\n          images,\n        },\n        id: this.props.match.params.id,\n      },\n      draft\n    )\n    message.success(\'添加文章成功\')\n  } else {\n    await addArticle(\n      {\n        ...values,\n        cover: {\n          type: values.type,\n          images,\n        },\n      },\n      draft\n    )\n    message.success(\'添加文章成功\')\n  }\n  this.props.history.push(\'/home/list\')\n}\n```');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (10, 10,
        '## 1.下载jdk\n\n在Oracle官网上下载不同版本的jdk：[jdk下载](www.oracle.com/java/technologies/downloads/)\n\n![在Oracle官网上下载不同版本的jdk](https://pic3.zhimg.com/80/v2-bb59b02be55da25e32eb20eb58a4b2a2_720w.webp)\n\n下载Java11版本链接 : [jdk11](www.oracle.com/java/technologies/javase-jdk11-downloads.html)\n\n![下载Java11版本链接](https://pic4.zhimg.com/80/v2-9481b994931cbfebef6a275e6186db0b_720w.webp)\n\n## 2.安装jdk\n\n运行此安装包，进行安装。安装后会发现jdk被分别安装在如下目录：\n\n```java\n/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk\n/Users/Kevin/development/tools/jdk-11.0.16.1.jdk\n/Users/Kevin/development/tools/jdk-17.0.4.1.jdk\n```\n\n## 3.配置jdk\n\n现在已经安装了3个版本的jdk，但是怎么确定当前生效的是哪个版本呢？或者说怎么切换这两个版本呢？配置方法如下：\n\n如果当前使用的shell是zsh就编辑.zshrc文件，如果是bash就编辑.bash_profile文件。\n\n在上述配置文件中添加如下配置：\n\n```\nJAVA_HOME_8=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home\nJAVA_HOME_11=/Users/Kevin/development/tools/jdk-11.0.16.1.jdk/Contents/Home\nJAVA_HOME_17=/Users/Kevin/development/tools/jdk-17.0.4.1.jdk/Contents/Home\nJRE_HOME=$JAVA_HOME/jre\nPATH=$PATH:$JAVA_HOME/bin\nCLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.\nexport JAVA_HOME=$JAVA_HOME_8\nexport JRE_HOME\nexport PATH\nexport CLASSPATH\n \nalias jdk8=\"export JAVA_HOME=$JAVA_HOME_8\"\nalias jdk11=\"export JAVA_HOME=$JAVA_HOME_11\"\nalias jdk17=\"export JAVA_HOME=$JAVA_HOME_17\"\n```\n\n\n然后执行一下此rc文件，终端中执行命令：\n\n```\nsource ~/.bash_profile 或者 source ~/.zshrc\n```\n\n## 4.切换jdk\n\n我们定义了别名：jdk8和jdk11和jdk17。\n\n\n默认配置的是jdk8\n\n![默认配置的是jdk8](https://pic1.zhimg.com/80/v2-74721da129bc41b5d68c63a4f2000d24_720w.webp)\n\n如果要切换jdk11，则在终端中执行命令：jdk11。如果要切换回jdk8，则执行命令：jdk8。\n\n![](https://pic4.zhimg.com/80/v2-a2fb7aa3b118ee389c5a4ac902725b3b_720w.webp)\n\n如果要切换jdk17，则在终端中执行命令：jdk17。如果要切换回jdk8，则执行命令：jdk8。\n\n![](https://pic3.zhimg.com/80/v2-0f4935c193d27bded69db9b30c39e8ae_720w.webp)\n\n```\nJAVA_HOME_8=/Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home\nJAVA_HOME_16=/Library/Java/JavaVirtualMachines/jdk-16.0.2.jdk/Contents/Home\nJRE_HOME=$JAVA_HOME/jre\nPATH=$PATH:$JAVA_HOME/bin\nCLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.\nexport JAVA_HOME=$JAVA_HOME_8\nexport JRE_HOME\nexport PATH\nexport CLASSPATH\n\nalias jdk8=\"export JAVA_HOME=$JAVA_HOME_8\"\nalias jdk11=\"export JAVA_HOME=$JAVA_HOME_16\"\n```\n');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (11, 11,
        '在创建spring boot或者spring cloud项目时，idea默认使用https://start.spring.io作为脚手架，创建完成后手动去添加相关的jar包组合。\n\n通过https://start.aliyun.com 可以直接勾选ali相关的jar包，快速的引入集成。\n\n修改如下位置：如下图：\n\n![](https://img.arnasoft.site/weblog/e9d5f97963ce46139103e954ab2d625f.png)\n\n使用 `使用https://start.spring.io` 时如下图：\n\n![](https://img.arnasoft.site/weblog/50635fd3a05d4d61bfaa05057f697dfb.png)\n\n使用 时如下图：\n![](https://img.arnasoft.site/weblog/5e3c88ee233d4a15b846b94551a20f54.png)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (12, 12,
        '今天突然发现自己的MySQL服务的密码有很多人知道，瞬间感觉不安全了 最初设想：\n\n1. 将[数据库](https://cloud.tencent.com/solution/database?from_column=20065&from=20065)内部所有库都导出来进行保存\n2. [容器](https://cloud.tencent.com/product/tke?from_column=20065&from=20065)删除\n3. 重新启一个服务并设置新的密码\n4. 将库导入\n\n好麻烦，并且最大缺点就是，如果当前有服务正在使用，这样那个服务不就要崩溃一段时间了吗？如果流量大的时候还会造成严重损失\n\n所以我决定找到可以直接修改MySQL密码的文章，找到了很多在本地修改MySQL密码的，也找到了容器上修改密码的。\n\n**然而一看可行，操作就废！** 最终东拼西凑，多次尝试终于有一个成功完成了，并且决心**写出傻瓜式操作的文章**，争取很多小伙伴使用的时候可以少浪费时间。\n\n接下来我将从部署到修改密码完整步骤展示出来。\n\n## \n\n## **1. 向 docker hub 拉去进行镜像到宿主机**\n\ndocker hub ：https://hub.docker.com/_/mysql?tab=tags\n\n拉取mysql镜像命令\n\n```javascript\ndocker pull mysql:8.0.28\n```\n\n复制\n\n或者不指定镜像版本（**这里以指定版本为例**）\n\n```javascript\ndocker pull mysql\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/88b18c61bb77c3328212a9ae6308d13f.jpeg)\n\n操作展示\n\n## **2. 查看镜像是否拉取成功**\n\n查看所有镜像命令\n\n```javascript\ndocker images\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/7b1358ade6a8d4c8560b93b52a67a8cd.jpeg)\n\n操作展示\n\n## **3. 创建mysql服务**\n\n```javascript\ndocker run -itd --name mysql8.0 -p 3306:3306 --restart=always -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.28\n```\n\n复制\n\n具体关键字内容可以单个查询这里不做过多介绍\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/e897308cf494dc56185e095c257c68ea.jpeg)\n\n操作展示\n\n## **4. 进入mysql容器**\n\n```javascript\ndocker exec -it mysql8.0 /bash \n```\n\n复制\n\n或者\n\n```javascript\ndocker exec -it mysql8.0 /bin/bash\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/9f5d4afac8e4b7a68ce818f5940dfcfc.jpeg)\n\n操作展示\n\n## **5.使用数据库**\n\n```javascript\nuse mysql;\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/4942eb3101d6f20b9ccfa6a2d6f39a16.jpeg)\n\n操作展示\n\n## **6. 查看数据库密码信息**\n\n```javascript\nselect host, user, authentication_string, plugin from user;\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/96d94426b4d1007a3a56c4cae672b22e.jpeg)\n\n操作展示\n\n## **7. 修改root密码**\n\n```javascript\nALTER USER \'root\'@\'%\' IDENTIFIED BY \'密码\' PASSWORD EXPIRE NEVER;\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/a8ac42974bf8bcd2410ce26da4eeb9ee.jpeg)\n\n操作展示\n\n### **7.1 查看是否有变动**\n\n```javascript\nselect host, user, authentication_string, plugin from user;\n```\n\n复制\n\n## **8. 修改本地密码**\n\n```javascript\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'lc123456\';\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/19c555d4de2d5d8047e66759f27c9be0.jpeg)\n\n操作展示\n\n### **8.1 查看是否有变动**\n\n```javascript\nselect host, user, authentication_string, plugin from user;\n```\n\n复制\n\n## **9. 退出Mysql和容器**\n\n两次exit\n\n```javascript\nexit\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/e961681e1b254cdd349741b8e30f5695.jpeg)\n\n操作展示\n\n## **10. 重启服务**\n\n```javascript\ndocker restart mysql8.0\n```\n\n复制\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/3644fd5a33e1435e31d5b348292a1038.jpeg)\n\n操作展示\n\n## **11. 验证是否成功**\n\n![img](//images.weserv.nl/?url=https://ask.qcloudimg.com/http-save/yehe-9978966/d7e56730c214daaaeb40979e11e1eab8.jpeg)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (13, 13,
        '## 1. 什么是 Jenkins ?\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471707103654)\n\n> Jenkins 是**一个开源的持续集成（Continuous Integration）工具，它的主要作用是帮助开发团队自动化构建、测试和部署软件项目**。通俗来说，Jenkins 可以在每次代码变更时，帮助我们自动进行一系列的操作，例如编译代码、运行测试、生成文档，甚至是将应用程序部署到服务器上。\n\n## 2. 为什么要使用 Jenkins 呢？\n\n- **自动化构建和测试：** Jenkins 可以监视版本控制系统（如 Git）中的代码变更，一旦有新的提交，就触发自动构建和测试流程。这有助于发现潜在的问题，确保代码的质量。\n- **持续集成：** Jenkins 支持持续集成，即频繁地将小的代码变更合并到主干，并通过自动构建和测试来验证这些变更。这有助于减少集成问题，提高团队的协作效率。\n- **自动化部署：** Jenkins 可以自动化部署应用程序到测试环境、预生产环境甚至生产环境。通过定义部署流程，可以减少人为错误，确保部署的一致性。\n- **插件生态系统：** Jenkins 拥有丰富的插件生态系统，支持各种开发工具、构建工具和部署目标。这意味着你可以很容易地将 Jenkins 集成到你的开发工作流中。\n- **可扩展性：** Jenkins 是开源的，并且具有强大的可扩展性。你可以根据团队的需求定制自己的构建和部署流程，满足特定项目的要求。\n\n## 3. 拉取镜像\n\n打开命令行工具 `PowerShell` , 执行搜索命令，如下:\n\n```\ndocker search jenkins\n```\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471134398158)\n\n注意，从搜索结果中，你会看到官方提供的 `jenkins` 镜像描述，提示我们该镜像已经过期，不再维护了。浏览器访问 [DockerHub](https://hub.docker.com/r/jenkins/jenkins) , 搜索关键字 *jenkins* , 找到目前正在维护的版本，如下图所示，提示我们通过如下命令，来下载最新的 `LTS` 长期支持版本：\n\n```\ndocker pull jenkins/jenkins:lts-jdk17\n```\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471142307926)\n\n镜像下载成功后，通过 `docker images` 命令来检查一下镜像是否下载成功：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471148754819)\n\n## 4. 运行容器\n\n接着，执行如下命令来运行 `jenkins` 容器：\n\n```\ndocker run -d -u root -p 8080:8080 -p 50000:50000 -v E:\\docker\\jenkins2\\jenkins_home:/var/jenkins_home --name jenkins2 jenkins/jenkins:lts-jdk17\n```\n\n> 解释一下每个参数的含义：\n>\n> - **docker run:** 运行 Docker 容器的命令。\n>\n> - **-d:** 在后台运行容器，即“detached”模式。\n>\n> - **-u root:** 以 root 用户身份运行容器。这通常用于确保容器内的进程具有足够的权限执行需要的操作。\n>\n> - **-p 8080:8080:** 将容器内部的 8080 端口映射到宿主机的 8080 端口。Jenkins 服务通常在 8080 端口上运行。\n>\n> - **-p 50000:50000:** 将容器内部的 50000 端口映射到宿主机的 50000 端口。这是 Jenkins 使用的用于构建和执行任务的端口。\n>\n> - **-v E:\\docker\\jenkins2\\jenkins_home:/var/jenkins_home:** 将宿主机上的目录（E:\\docker\\jenkins2\\jenkins_home）挂载到容器内的 /var/jenkins_home 目录。这样可以确保 Jenkins 数据和配置持久化，即使容器被删除，数据仍然保存在宿主机上。\n>\n> - **--name jenkins2:** 为容器指定一个名称，即 \"jenkins2\"。\n>\n>   > TIP : 因为我本地之前测试的时候，已经命名了一个容器名为 jenkins , 这里演示为了防止冲突，命名的 jenkins2 。\n>\n> - **jenkins/jenkins:lts-jdk17:** 指定要运行的 Docker 镜像的名称和版本。在这里，使用的是 Jenkins 的 LTS 版本，内部使用的 JDK 17。\n\n命令执行后，执行 `docker ps` 命令来查看正在运行的容器，确认一下容器是否运行成功：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471177995761)\n\n## 5. 访问 Jenkins\n\n然后，打开浏览器访问 [http://localhost:8080](http://localhost:8080/) , 首次访问可能速度较慢，请耐心等待一会，会出现如下页面：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471193501174)\n\n需要你提供**管理员密码** ， 密码可以通过如下命令，来查看 `jenkins2` 容器的启动日志：\n\n```\ndocker logs jenkins2\n```\n\n在日志中，可以看到该密码，如下图所示，将其复制粘贴到输入框中，点击*继续*按钮：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471188631014)\n\n## 6. 安装插件\n\n接着，进入到如下页面，点击左边的*安装推荐的插件* ：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471198343894)\n\n开始安装 `jenkins` 需要的常用插件，过程比较慢，等待其全部安装完毕：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471214984133)\n\n## 7. 配置管理员用户\n\n插件安装完毕后，开始配置管理员用户：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471650265585)\n\n> **注意**： 后续再次登录 `jenkins` 后台需要，务必记住登录用户名和密码。\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471654746992)\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471450544577)\n\n点击*开始使用 Jenkins* 按钮，进入到 `Jenkins` 后台首页，如下图所示，至此，`Jenkins` 就安装好啦，是不是很简单：\n\n![img](https://img.quanxiaoha.com/quanxiaoha/170471659718399)\n\n');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (14, 14, '## npm常用网址\n\n- [npmmirror 镜像站](https://npmmirror.com/)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (15, 15,
        '1. 清除node缓存:`sudo npm cache clean -f`\n2. 安装 n 执行:`npm install n -g`\n   - 注意：如果报错如:code EACCES errno -13,表示你没有权限安装，使用管理员身份安装：`sudo npm i n -g`\n3. 查看n是否安装成功：`n -V`\n4. 使用n管理node\n   - 查看node可以使用的列表`n ls`\n   - 安装制定版本node\n     - 查看官方node版本 `npm view node versions` 或者 [node官网](https://link.juejin.cn/?target=https%3A%2F%2Fnodejs.org%2Fzh-cn%2Fdownload%2Freleases%2F)\n     - 安装指定的node版本: `n node版本号` 如:`n 17.2.0`\n     - 注意：如果最终显示的还是原来node的版本号则需要在管理员权限下运行: `sudo n node版本号`\n5. 切换node版本\n   - 首先执行`n`，通过上下键进行切换选择，最后使用enter键选中版本。\n   - 如果选中后还是原来版本，则使用 `sudo n`，后再通过上下键进行切换选择，最后使用enter键选中版本。\n6. 删除指定版本node 运行命令 `n rm node版本号`或者运行` sudo n rm 10.13.1`\n7. 卸载 n 执行 `npm uninstall n -g`或`sudo npm uninstall n -g`\n8. node版本展示\n   - 列出最新的node版本 `n ls-remote`\n   - 列出11X的版本 `n ls-remote 11`\n9. 安装版本\n   - 安装最新正式发布版本 `sudo n latest`\n   - 安装最新的长期支持正式发布版本 `sudo n lts`\n   - 安装指定版本 `sudo n 14.14.0`\n  \n- [原链接](https://juejin.cn/post/7065701236925792293)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (16, 16,
        '## docker redis 设置密码并启动\n```\ndocker run --name redis -p 6379:6379 -id redis --requirepass \"1234\"\n```\n\n## 登录 redis\n```\ndocker run -it redis redis-cli -h 172.17.0.1\n```\n\n## 查进程\n\n`docker ps`\n\n![查进程](https://img.arnasoft.site/weblog/16d8cc46d682484e861eee5eb03a77de.png)\n\n[docker 启动redis并设置密码与修改密码](https://juejin.cn/post/6951205777009410085)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (17, 17,
        '## 一、Vconsole 简介\n\n一个轻量、可拓展、针对手机网页的前端开发者调试面板\n\n## 二、功能特性\n\n查看`console.log|info|...`日志、网络请求、HTML结构、本地存储等，在移动端网页调试非常方便。\n\n## 三、在Vue2中的使用\n\n1、安装\n\n```\n复制代码npm install vconsole -D\n```\n\n2、在 `main.js` 中引入\n\n```javascript\njavascript\n// 引入 Vconsole\nimport Vconsole from \'vconsole\'\n\n// 所有环境均使用\nnew Vconsole()\n\n// 在 test 环境才使用\nprocess.NODE_ENV === \'test\' ? new Vconsole : \'\'\n```\n\n## 四、在Vue3中使用\n\n1、安装\n\n```\n复制代码npm install vconsole vite-plugin-vconsole -D\n```\n\n2、`main.js`中引入\n\n```javascript\njavascript\nimport { createApp } from \'vue\'\nimport Vconsole from \'vconsole\'\n\nconst app = createApp(App)\napp.use(new Vconsole())\n```\n\n3、`vite.config.js`配置\n\n```javascript\njavascript\nimport { defineConfig, loadEnv } from \'vite\'\nimport path from \'path\'\nimport { viteVConsole } from \'vite-plugin-vconsole\'\n\nexport default ({ mode }) => {\n  return defineConfig({\n    // 需要用到的插件数组\n    plugins: [\n      vue(),\n      // VConsole 调试工具配置，若没有此配置，则调试工具控制台不会打印日志\n      viteVConsole({\n        entry: path.resolve(\'src/main.js\'), // 入口文件，或者可以使用这个配置: [path.resolve(\'src/main.ts\')]\n        localEnabled: false, // 本地是否启用\n        enabled: mode === \'test\', // 是否启用\n        config: {\n          maxLogNumber: 1000,\n          // theme: \'dark\' // 主题颜色\n        }\n      })\n    ],\n  })\n}\n```\n\n> 值得注意的是，在vue3项目中，可以直接在vite.config.js中配置完以后，不需要在main.js中再次引入就能够使用。');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (18, 18,
        '# IDEA 创建SpringBoot项目没办法选择jdk8\n\n由于在2023年11月27日更新后，`spring.io`默认不再支持创建`jdk1.8`的项目（算是强制性要求咱们用高版本的jdk吧），现在没办法直接通过`start.spring.io`来创建项目，看了网上的方法都是创建了项目后换`jdk`换`spring`版本之类的，实在是不太方便\n\n![](https://img.arnasoft.site/weblog/416d8c683c444806b7b30cfe1d53a180.png)\n\n这里可以使用更便捷的方式，直接替换`server url`，这里推荐使用阿里的服务器`url`来创建项目，地址如下：\n\n```\nhttps://start.aliyun.com/\n```\n![](https://img.arnasoft.site/weblog/2d25d4ff46094e3a93e8641b2b9c0466.png)\n');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (19, 19,
        '![useDark深色模式](https://img.arnasoft.site/weblog/8ac9804adcca4c98adf598dc1937f656.png)\n\n对于为什么用 useDark() 会导致过渡效果失效,一直找不到原因？\n```\nconst isDark = useDark()\nconst toggleDark = useToggle(isDark)\n```\n\n查看源码发现useDark（默认行为）会临时插入一个style并禁用transition，之后再移除，导致你的过渡失效了，你可以通过加上important解决，当然这个disableTransition也是可以传入useDark({disableTransition: false})这样也可以解决问题。\n```\nconst isDark = useDark({disableTransition: false})\nconst toggleDark = useToggle(isDark)\n```\n\n**相关网址**\n- [VueUse](https://vueuse.org/)\n- [使用 useDark(), 发现 transition 动画失效?](https://segmentfault.com/q/1010000043785052)');
INSERT INTO `article_content` (`id`, `article_id`, `content`)
VALUES (20, 20,
        '前段时间开发某个项目刚好需要引入字体用阿里巴巴的字体图标库 [](https://www.iconfont.cn/) ，平时搜某个图标后想批量导入到购物车，可惜阿里巴巴字体图标库目前还没加批量入库的功能，只能一个个点，这多麻烦。。。在这里给大家推荐一个方法，可以批量导入。\n1. 首先打开字体图标库 [iconfont](https://www.iconfont.cn/)\n2. 搜索 `java` 相关的图标，结果如下：\n   \n![](https://img.arnasoft.site/weblog/eb2ce362b4c64e25a7601ab0ddf702db.png)\n\n3. 如需要批量导入按F12打开控制台 `console`面板执行以下代码\n```js\ndocument.querySelectorAll(\'li:not(.selected) [title=添加入库]\').forEach(i=>i.click())\n```\n![](https://img.arnasoft.site/weblog/22e8d4739c8b4417af797bd19b4e9690.png)\n');
COMMIT;

-- ----------------------------
-- Table structure for article_category_rel
-- ----------------------------
DROP TABLE IF EXISTS `article_category_rel`;
CREATE TABLE `article_category_rel`
(
    `id`          bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
    `article_id`  bigint(20) UNSIGNED NOT NULL COMMENT '文章id',
    `category_id` bigint(20) UNSIGNED NOT NULL COMMENT '分类id',
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE INDEX `uni_article_id`(`article_id`) USING BTREE,
    INDEX         `idx_category_id`(`category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 59 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章所属分类关联表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_category_rel
-- ----------------------------
INSERT INTO `article_category_rel`
VALUES (22, 2, 9);
INSERT INTO `article_category_rel`
VALUES (25, 7, 9);
INSERT INTO `article_category_rel`
VALUES (33, 11, 18);
INSERT INTO `article_category_rel`
VALUES (34, 10, 18);
INSERT INTO `article_category_rel`
VALUES (38, 12, 2);
INSERT INTO `article_category_rel`
VALUES (41, 13, 2);
INSERT INTO `article_category_rel`
VALUES (43, 15, 7);
INSERT INTO `article_category_rel`
VALUES (45, 16, 18);
INSERT INTO `article_category_rel`
VALUES (47, 14, 18);
INSERT INTO `article_category_rel`
VALUES (48, 17, 9);
INSERT INTO `article_category_rel`
VALUES (49, 18, 2);
INSERT INTO `article_category_rel`
VALUES (50, 19, 9);
INSERT INTO `article_category_rel`
VALUES (55, 20, 9);
INSERT INTO `article_category_rel`
VALUES (58, 21, 9);

-- ----------------------------
-- Table structure for article_tag_rel
-- ----------------------------
DROP TABLE IF EXISTS `article_tag_rel`;
CREATE TABLE `article_tag_rel`
(
    `id`         bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
    `article_id` bigint(20) UNSIGNED NOT NULL COMMENT '文章id',
    `tag_id`     bigint(20) UNSIGNED NOT NULL COMMENT '标签id',
    PRIMARY KEY (`id`) USING BTREE,
    INDEX        `idx_article_id`(`article_id`) USING BTREE,
    INDEX        `idx_tag_id`(`tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 171 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章对应标签关联表' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of article_tag_rel
-- ----------------------------
INSERT INTO `article_tag_rel`
VALUES (63, 2, 10);
INSERT INTO `article_tag_rel`
VALUES (64, 2, 11);
INSERT INTO `article_tag_rel`
VALUES (73, 7, 10);
INSERT INTO `article_tag_rel`
VALUES (74, 7, 9);
INSERT INTO `article_tag_rel`
VALUES (75, 7, 11);
INSERT INTO `article_tag_rel`
VALUES (93, 11, 1);
INSERT INTO `article_tag_rel`
VALUES (94, 11, 30);
INSERT INTO `article_tag_rel`
VALUES (95, 11, 24);
INSERT INTO `article_tag_rel`
VALUES (96, 10, 1);
INSERT INTO `article_tag_rel`
VALUES (97, 10, 17);
INSERT INTO `article_tag_rel`
VALUES (107, 12, 1);
INSERT INTO `article_tag_rel`
VALUES (108, 12, 31);
INSERT INTO `article_tag_rel`
VALUES (109, 12, 32);
INSERT INTO `article_tag_rel`
VALUES (110, 12, 33);
INSERT INTO `article_tag_rel`
VALUES (117, 13, 1);
INSERT INTO `article_tag_rel`
VALUES (118, 13, 33);
INSERT INTO `article_tag_rel`
VALUES (119, 13, 32);
INSERT INTO `article_tag_rel`
VALUES (121, 15, 17);
INSERT INTO `article_tag_rel`
VALUES (122, 15, 9);
INSERT INTO `article_tag_rel`
VALUES (126, 16, 1);
INSERT INTO `article_tag_rel`
VALUES (127, 16, 25);
INSERT INTO `article_tag_rel`
VALUES (128, 16, 32);
INSERT INTO `article_tag_rel`
VALUES (130, 14, 9);
INSERT INTO `article_tag_rel`
VALUES (131, 17, 2);
INSERT INTO `article_tag_rel`
VALUES (132, 17, 11);
INSERT INTO `article_tag_rel`
VALUES (133, 17, 12);
INSERT INTO `article_tag_rel`
VALUES (134, 17, 22);
INSERT INTO `article_tag_rel`
VALUES (135, 18, 1);
INSERT INTO `article_tag_rel`
VALUES (136, 18, 9);
INSERT INTO `article_tag_rel`
VALUES (137, 18, 24);
INSERT INTO `article_tag_rel`
VALUES (138, 18, 30);
INSERT INTO `article_tag_rel`
VALUES (139, 19, 11);
INSERT INTO `article_tag_rel`
VALUES (140, 19, 34);
INSERT INTO `article_tag_rel`
VALUES (153, 20, 2);
INSERT INTO `article_tag_rel`
VALUES (154, 20, 9);
INSERT INTO `article_tag_rel`
VALUES (155, 20, 39);
INSERT INTO `article_tag_rel`
VALUES (158, 21, 40);
INSERT INTO `article_tag_rel`
VALUES (159, 21, 2);
INSERT INTO `article_tag_rel`
VALUES (160, 21, 11);
INSERT INTO `article_tag_rel`
VALUES (161, 21, 12);
INSERT INTO `article_tag_rel`
VALUES (162, 21, 21);
INSERT INTO `article_tag_rel`
VALUES (163, 21, 22);
INSERT INTO `article_tag_rel`
VALUES (164, 21, 23);
INSERT INTO `article_tag_rel`
VALUES (165, 21, 34);
INSERT INTO `article_tag_rel`
VALUES (166, 21, 35);
INSERT INTO `article_tag_rel`
VALUES (167, 21, 36);
INSERT INTO `article_tag_rel`
VALUES (168, 21, 37);
INSERT INTO `article_tag_rel`
VALUES (169, 21, 38);
INSERT INTO `article_tag_rel`
VALUES (170, 21, 39);


-- ----------------------------
-- Table structure for blog_setting
-- ----------------------------
DROP TABLE IF EXISTS `blog_setting`;
CREATE TABLE `blog_setting`
(
    `id`                         bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
    `logo`                       varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '博客Logo',
    `name`                       varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NOT NULL DEFAULT '' COMMENT '博客名称',
    `author`                     varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NOT NULL DEFAULT '' COMMENT '作者名',
    `introduction`               varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '介绍语',
    `avatar`                     varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '作者头像',
    `github_homepage`            varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'GitHub 主页访问地址',
    `csdn_homepage`              varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'CSDN 主页访问地址',
    `gitee_homepage`             varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'Gitee 主页访问地址',
    `zhihu_homepage`             varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '知乎主页访问地址',
    `mail`                       varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci           DEFAULT '' COMMENT '博主邮箱地址',
    `is_comment_sensi_word_open` tinyint                                                       NOT NULL DEFAULT '1' COMMENT '是否开启评论敏感词过滤, 0:不开启；1：开启',
    `is_comment_examine_open`    tinyint                                                       NOT NULL DEFAULT '0' COMMENT '是否开启评论审核, 0: 未开启；1：开启',
    PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='博客设置表';

-- ----------------------------
-- Records of blog_setting
-- ----------------------------
BEGIN;
INSERT INTO `blog_setting` (`id`, `logo`, `name`, `author`, `introduction`, `avatar`, `github_homepage`,
                            `csdn_homepage`, `gitee_homepage`, `zhihu_homepage`, `mail`, `is_comment_sensi_word_open`,
                            `is_comment_examine_open`)
VALUES (1, 'https://avatars.githubusercontent.com/u/26585993', 'Ben', 'Ben', 'Less is More',
        'https://avatars.githubusercontent.com/u/26585993', 'http://github.benjieqiang.com',
        'http://github.benjieqiang.com', 'http://github.benjieqiang.com', 'http://github.benjieqiang.com',
        'benjieqiang@gmail.com', 1, 1);
COMMIT;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`
(
    `id`             bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '分类id',
    `name`           varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '分类名称',
    `create_time`    datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time`    datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最后一次更新时间',
    `is_deleted`     tinyint                                                      NOT NULL DEFAULT '0' COMMENT '逻辑删除标志位：0：未删除 1：已删除',
    `articles_total` int                                                                   DEFAULT NULL,
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE KEY `uk_name` (`name`) USING BTREE,
    KEY              `idx_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='文章分类表';

-- ----------------------------
-- Records of category
-- ----------------------------
BEGIN;
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (2, '后端开发', '2024-03-21 17:32:04', '2024-03-21 17:32:04', 0, 3);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (3, 'Flutter', '2024-03-21 17:54:51', '2024-03-21 17:54:51', 1, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (7, 'Nodejs', '2024-03-21 17:55:11', '2024-03-21 17:55:11', 0, 1);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (9, '前端开发', '2024-03-21 19:39:38', '2024-03-21 19:39:38', 0, 5);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (10, 'App开发', '2024-03-21 20:56:46', '2024-03-21 20:56:46', 0, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (11, '人工智能', '2024-03-21 20:56:58', '2024-03-21 20:56:58', 0, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (17, '生活知识', '2024-03-26 08:00:16', '2024-03-26 08:00:16', 0, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (18, '软件安装', '2024-03-26 08:01:19', '2024-03-26 08:01:19', 0, 4);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (19, 'Git', '2024-04-17 11:16:04', '2024-04-17 11:16:04', 0, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (20, 'Java', '2024-12-12 14:29:36', '2024-12-12 14:29:36', 1, 0);
INSERT INTO `category` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (21, 'python', '2024-12-12 15:24:02', '2024-12-12 15:24:02', 0, 0);
COMMIT;

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`
(
    `id`             bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '标签id',
    `name`           varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '标签名称',
    `create_time`    datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time`    datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最后一次更新时间',
    `is_deleted`     tinyint                                                      NOT NULL DEFAULT '0' COMMENT '0：未删除 1：已删除',
    `articles_total` int                                                                   DEFAULT NULL COMMENT '文章总数',
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE KEY `uk_name` (`name`) USING BTREE,
    KEY              `idx_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='文章标签表';

-- ----------------------------
-- Records of tag
-- ----------------------------
BEGIN;
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (1, 'java', '2024-03-21 23:44:27', '2024-03-21 23:44:27', 0, 6);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (2, 'javascript', '2024-03-21 23:44:44', '2024-03-21 23:44:44', 0, 3);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (3, 'Python', '2024-03-21 23:44:49', '2024-03-21 23:44:49', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (9, '工具', '2024-03-22 16:34:10', '2024-03-22 16:34:10', 0, 5);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (10, 'Flutter', '2024-03-22 16:36:30', '2024-03-22 16:36:30', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (11, 'Vue3', '2024-03-22 17:16:24', '2024-03-22 17:16:24', 0, 5);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (12, 'Vite', '2024-03-22 17:16:24', '2024-03-22 17:16:24', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (13, 'Element', '2024-03-22 17:16:24', '2024-03-22 17:16:24', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (14, '生活知识', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (15, '健康', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (16, '跑步', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (17, 'Mac', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (18, 'Windows', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (19, 'iPhone', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (20, '安卓', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (21, 'UniApp', '2024-03-26 16:02:48', '2024-03-26 16:02:48', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (22, 'Vue2', '2024-03-26 16:03:30', '2024-03-26 16:03:30', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (23, '微信小程序', '2024-03-26 16:03:30', '2024-03-26 16:03:30', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (24, 'SpringBoot', '2024-03-26 16:03:30', '2024-03-26 16:03:30', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (25, 'Redis', '2024-03-26 16:03:30', '2024-03-26 16:03:30', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (26, '心理学', '2024-03-26 16:04:21', '2024-03-26 16:04:21', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (27, '孩子教育', '2024-03-26 16:04:21', '2024-03-26 16:04:21', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (28, '自我提升', '2024-03-26 16:04:21', '2024-03-26 16:04:21', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (29, '经济管理', '2024-03-26 16:04:21', '2024-03-26 16:04:21', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (30, 'IDE', '2024-03-26 17:53:00', '2024-03-26 17:53:00', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (31, 'MySql', '2024-04-03 10:45:31', '2024-04-03 10:45:31', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (32, 'Docker', '2024-04-03 10:45:31', '2024-04-03 10:45:31', 0, 3);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (33, 'Jenkins', '2024-04-03 10:45:31', '2024-04-03 10:45:31', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (34, 'VueUse', '2024-04-17 00:33:03', '2024-04-17 00:33:03', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (35, 'Git', '2024-04-17 19:16:25', '2024-04-17 19:16:25', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (36, 'Npm', '2024-04-17 19:19:48', '2024-04-17 19:19:48', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (37, 'Vant', '2024-04-17 19:19:48', '2024-04-17 19:19:48', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (38, 'ElementUI', '2024-04-17 19:19:48', '2024-04-17 19:19:48', 0, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (39, '字体图标', '2024-04-19 18:46:32', '2024-04-19 18:46:32', 0, 2);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (40, '面试题', '2024-04-23 18:58:17', '2024-04-23 18:58:17', 1, 1);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (44, 'test1', '2024-12-13 10:37:29', '2024-12-13 10:37:29', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (45, 'test2', '2024-12-13 10:37:29', '2024-12-13 10:37:29', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (46, 'test3', '2024-12-13 10:37:29', '2024-12-13 10:37:29', 1, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (49, '123', '2024-12-13 11:18:00', '2024-12-13 11:18:00', 0, 0);
INSERT INTO `tag` (`id`, `name`, `create_time`, `update_time`, `is_deleted`, `articles_total`)
VALUES (50, '12334', '2024-12-13 11:18:00', '2024-12-13 11:18:00', 0, 0);
COMMIT;

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`
(
    `id`          bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id',
    `username`    varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
    `password`    varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
    `create_time` datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time` datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
    `is_deleted`  tinyint                                                      NOT NULL DEFAULT '0' COMMENT '0：未删除 1：已删除',
    PRIMARY KEY (`id`),
    UNIQUE KEY `uk_username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='用户表';

-- ----------------------------
-- Records of user
-- ----------------------------
BEGIN;
INSERT INTO `user` (`id`, `username`, `password`, `create_time`, `update_time`, `is_deleted`)
VALUES (5, 'ben', '$2a$10$eVkOaNbsBMvhKCAKBDRwWeVYycUL.wj5L2c6gYk23UY/D2qh42mu2', '2024-12-03 17:04:24',
        '2024-12-03 17:04:24', 0);
INSERT INTO `user` (`id`, `username`, `password`, `create_time`, `update_time`, `is_deleted`)
VALUES (6, 'admin', '$2a$10$TWNYR0ztTCSCs2SD4KZ0yu6QcXM0nAdMQrE7xvuZfj5OjYJ81vAO6', '2024-12-05 18:14:00',
        '2024-12-05 18:14:00', 0);
INSERT INTO `user` (`id`, `username`, `password`, `create_time`, `update_time`, `is_deleted`)
VALUES (7, 'test', '$2a$10$CJFHBjdUr4h0TbN9mn5PXOmAQSUz3Kd3oDDVMqIWGyWBXsUbwRoiy', '2024-12-05 23:54:12',
        '2024-12-05 23:54:12', 0);
COMMIT;

-- ----------------------------
-- Table structure for user_role
-- ----------------------------
DROP TABLE IF EXISTS `user_role`;
CREATE TABLE `user_role`
(
    `id`          bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '自增id',
    `username`    varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
    `role`        varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色',
    `create_time` datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time` datetime                                                     NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    PRIMARY KEY (`id`),
    KEY           `idx_username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='用户角色表';

-- ----------------------------
-- Records of user_role
-- ----------------------------
BEGIN;
INSERT INTO `user_role` (`id`, `username`, `role`, `create_time`, `update_time`)
VALUES (1, 'ben', 'ROLE_ADMIN', '2024-12-03 08:46:55', '2024-12-03 08:46:55');
INSERT INTO `user_role` (`id`, `username`, `role`, `create_time`, `update_time`)
VALUES (2, 'admin', 'ROLE_ADMIN', '2024-12-03 08:46:55', '2024-12-05 18:19:11');
INSERT INTO `user_role` (`id`, `username`, `role`, `create_time`, `update_time`)
VALUES (3, 'test', 'ROLE_TEST', '2024-12-03 08:47:57', '2024-12-03 08:51:42');
INSERT INTO `user_role` (`id`, `username`, `role`, `create_time`, `update_time`)
VALUES (4, 'ben', 'ROLE_TEST', '2024-12-03 08:47:57', '2024-12-03 08:47:57');
INSERT INTO `user_role` (`id`, `username`, `role`, `create_time`, `update_time`)
VALUES (5, 'test2', 'ROLE_TEST', '2024-12-13 08:35:54', '2024-12-13 08:35:54');
COMMIT;


-- ----------------------------
-- Table structure for statistics_article_pv
-- ----------------------------
DROP TABLE IF EXISTS `statistics_article_pv`;
CREATE TABLE `statistics_article_pv`
(
    `id`          bigint unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
    `pv_date`     date     NOT NULL COMMENT '被统计的日期',
    `pv_count`    bigint unsigned NOT NULL COMMENT 'pv访问量',
    `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最后一次更新时间',
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE KEY `uk_pv_date` (`pv_date`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC COMMENT='统计表 - 文章 PV (访问量)';

-- ----------------------------
-- Records of statistics_article_pv
-- ----------------------------
BEGIN;
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (1, '2024-03-27', 13, '2024-03-26 23:00:00', '2024-03-26 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (2, '2024-03-28', 64, '2024-03-27 23:00:00', '2024-03-27 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (3, '2024-04-04', 0, '2024-04-03 23:00:00', '2024-04-03 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (4, '2024-04-05', 3, '2024-04-04 23:00:00', '2024-04-04 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (5, '2024-04-06', 15, '2024-04-05 23:00:00', '2024-04-05 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (6, '2024-04-07', 5, '2024-04-06 23:00:00', '2024-04-06 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (8, '2024-04-08', 17, '2024-04-07 23:00:00', '2024-04-07 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (9, '2024-04-09', 1, '2024-04-08 23:00:00', '2024-04-08 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (10, '2024-04-10', 4, '2024-04-09 23:00:00', '2024-04-09 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (11, '2024-04-11', 7, '2024-04-10 23:00:00', '2024-04-10 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (12, '2024-04-12', 3, '2024-04-11 23:00:00', '2024-04-11 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (13, '2024-04-13', 1, '2024-04-12 23:00:00', '2024-04-12 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (14, '2024-04-14', 2, '2024-04-13 23:00:00', '2024-04-13 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (15, '2024-04-15', 11, '2024-04-14 23:00:00', '2024-04-14 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (16, '2024-04-16', 0, '2024-04-15 23:00:00', '2024-04-15 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (17, '2024-04-17', 64, '2024-04-16 23:00:00', '2024-04-16 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (18, '2024-04-18', 10, '2024-04-17 23:00:00', '2024-04-17 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (19, '2024-04-19', 2, '2024-04-18 23:00:00', '2024-04-18 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (20, '2024-04-20', 1, '2024-04-19 23:00:00', '2024-04-19 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (21, '2024-04-21', 0, '2024-04-20 23:00:00', '2024-04-20 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (22, '2024-04-22', 0, '2024-04-21 23:00:00', '2024-04-21 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (23, '2024-04-23', 6, '2024-04-22 23:00:00', '2024-04-22 23:00:00');
INSERT INTO `statistics_article_pv` (`id`, `pv_date`, `pv_count`, `create_time`, `update_time`)
VALUES (24, '2024-04-24', 16, '2024-04-23 23:00:00', '2024-04-23 23:00:00');
COMMIT;

SET
FOREIGN_KEY_CHECKS = 1;
